<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $http, $rootScope, glideUserSession, $document, $httpParamSerializer, $location) {
    var c = this;

    var merchId = null;
    /***Role user connecter */
    glideUserSession.loadCurrentUser().then(function (currentUser) {
        c.data.role = currentUser.hasRoleFromList('admin');
        console.log("role " + c.data.role);
        c.data.name = currentUser.getFullName();
    });
    /************** si formulaire pour la mise à jour */
    if (c.data.idUpdate != "-1") {
        /*****User*****/
        $scope.user = {
            displayValue: c.data.userName,
            value: c.data.userId,
            name: 'c.data.user'
        }
        $scope.category = {

            displayValue: c.data.categoryName,

            value: c.data.category,

            name: 'c.data.category'

        }
        $scope.sheet = {

            displayValue: c.data.sheetName,

            value: c.data.sheet,

            name: 'c.data.sheet'

        }
        $scope.country = {

            displayValue: c.data.countryName,

            value: c.data.country,

            name: 'c.data.country'

        }
        $scope.payment = {
            displayValue: c.data.paymentName,
            value: c.data.payment,
            name: 'c.data.payment'
        }
        $scope.merchant = {
            displayValue: c.data.merchnamee,
            value: c.data.merchId,
            name: 'c.data.merchant'
        }
        c.dated = {
            displayValue: '',
            value: c.data.datedd,
            name: 'dated'
        }
        c.processd = {
            displayValue: '',
            value: c.data.processdd,
            name: 'processd'
        }

    }
      /************** si formulaire pour l'ajout' */
    if (c.data.idUpdate == "-1") {
        $scope.user = {
            displayValue: c.data.userName,
            value: c.data.userId,
            name: 'c.data.user'
        };
        $scope.sheet = {
            displayValue: '',
            value: '',
            name: 'c.data.sheet'
        }
        $scope.payment = {
            displayValue: c.data.payName,
            value: c.data.paySysId,
            name: 'c.data.payment'
        }
        $scope.merchant = {
            displayValue: '',
            value: '',
            name: 'c.data.merchant'
        }
        $scope.card = {
            displayValue: '',
            value: '',
            name: 'c.data.card'
        }
        $scope.country = {
            displayValue: '',
            value: '',
            name: 'c.data.country'
        }
        $scope.category = {
            displayValue: c.data.categName,
            value: c.data.categSysId,
            name: 'c.data.category'
        }
        c.dated = {
            displayValue: '',
            value: '',
            name: 'dated'
        }
        c.processd = {
            displayValue: '',
            value: '',
            name: 'processd'
        }
    }

    c.data.ok = false;
    /*********l'utilisateur choisir d'ajouter nouveau merchant */
    $scope.addMerchant = function () {
        c.data.ok = true;
        merchId = null;
        $scope.merchant = {
            displayValue: '',
            value: '',
            name: 'c.data.merchant'
        }
    }

    var BASE64_MARKER = ';base64,';
    $scope.files = [];

    /***********l'utilisateur choisir  merchant depuis la liste  */
    $scope.getFields = function () {
        c.data.ok = false;

    }

    $scope.testFile = function () {
        var ok = false;
        if (c.data.file == null) {
            alert("validation failed false");
            ok = true;
        }
        return ok;
    }

    /*********** Valisation du formulaire  */
    $scope.testComplete = function () {
        var ok = false;
        //if( c.data.scanFinish && c.data.value && c.data.title && $scope.sheet  && $scope.dated ){
        if (c.data.value && c.data.title && $scope.sheet && $scope.dated) {
            ok = true;
        }
        if (c.data.idUpdate != "-1")
            ok = true;
        return ok;
    }

    $scope.files = [];
 
    //Traitement D'image 
    $scope.setFiles = function (element) {
        $scope.$apply(function () {
            c.data.show_progress = true;
            var dates = [];
            /****Afficher l'image au formuaire */
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#image_show').attr('src', e.target.result);
                }
                reader.readAsDataURL(element.files[0]);
             /****fin Afficher l'image au formuaire */
            for (var i = 0; i < element.files.length; i++) {
                var type = element.files[i].type;
                $scope.files.push(element.files[i]);
                var datass = [];
                pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.2.2/pdf.worker.js';
              /*********************File PDF */
                if (type == 'application/pdf') {
                    c.data.scanFinish = false;
                    var input = element.files[i];
                    var fReader = new FileReader();
                    fReader.readAsDataURL(input);
                    fReader.onloadend = function (event) {
                        convertDataURIToBinary(event.target.result);
                        c.data.scanFinish = true;
                        c.data.show_progress = false;
                    }
                }
                /*********************File Image */
                if (type == 'image/jpeg') {
                    c.data.scanFinish = false;
                    //Tesseract : SCan Image
                    Tesseract.recognize(element.files[i])
                        .then(function (result) {
                            //Parcour line result
                            for (var i = 0; i < result.lines.length; i++) {
                                var model = result.lines[i].text;
                                //Merchant
                                var test = testExiste(model);
                                if (test.name != null) {
                                    merchId = test.sys_id;

                                    $scope.merchant = {
                                        displayValue: test.name,
                                        value: merchId,
                                        name: 'c.data.merchant'
                                    }
                                }
                                // test Existe Mode de Payement 
                                var testPay = testExistePay(model);
                                if (testPay.sys_id != null) {
                                    $scope.payment = {
                                        displayValue: c.data.payName,
                                        value: c.data.paySysId,
                                        name: 'c.data.payment'
                                    };
                                }
                                //Date 
                                var dd = model.match("([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}");
                                if (dd != null) {
                                    var regex = /[0-9]{1,4}(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}/mg;
                                    var regex2 = /([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)[0-9]{1,4}(\-|\/|\. |\ )[0-9]{1,4}/mg;
                                    var s = $scope.getDate(regex, model);
                                    if (s != undefined) {
                                        if ($scope.validateDate(s._i)) {
                                            if (!findDuplicate(dates, s)) {
                                                dates.push(s._i);
                                            }
                                        }
                                        s = $scope.getDate(regex2, model);
                                        if ($scope.validateDate(s._i)) {
                                            if (!findDuplicate(dates, s)) {
                                                dates.push(s._i);
                                                var r = convert(s);
                                                document.getElementById('sp_formfield_dated').value = r;

                                                c.dated.value = r;
                                                console.log("date 2: " + c.dated.value);
                                            }
                                        }
                                    }
                                }
                                var l = model;
                                model.toUpperCase();
                                //Date
                                if (model.indexOf("DATE") != -1) {

                                    l = model.substring(model.indexOf("DATE"), model.indexOf(lastIndexOfDigit(model)));

                                }
                                //Total
                                if (model.indexOf('TO') != -1) {
                                    l = model.substring(model.indexOf('TO'), model.indexOf(' '));

                                }
                                if (model.indexOf('TOTAL TTC') != -1) {
                                    l = model.substring(model.indexOf('TOTAL TTC'), model.indexOf(' '));

                                }
                                if (model.indexOf('PRIX') != -1) {
                                    l = model.substring(model.indexOf('PRIX'), model.indexOf(' '));

                                }
                                //Test pour récuperer Value
                                if (JaroWrinker(l.toUpperCase(), 'TO') > 0.70 || JaroWrinker(l.toUpperCase(), 'PRIX') > 0.70 || JaroWrinker(l.toUpperCase(), 'TOTAL TTC') > 0.70) {
                                    var matches = model.match(/\d{1,3}[,\\.]?(\\d{1,2})?/g).join("");
                                    var val = parseInt(matches + "", 10);
                                    document.getElementById('value').value = val;
                                    c.data.value = val;
                                }
                            }
                            c.data.scanFinish = true;
                            c.data.show_progress = false;
                        });
                }
            }
        });
    };
 
    /********************************* Change URL ********************************/
    var originalUrl, initUrl;
    $rootScope.$on("$locationChangeStart", function (e, newUrl) {
        if (newUrl != originalUrl && newUrl != initUrl) {
            $window.history.replaceState(newUrl, $document.title, newUrl);
        }
        originalUrl = newUrl;
        e.preventDefault();
    });

    $scope.changeURL = function () {
        initUrl = $location.absUrl();
        var params = {
            id: 'list_bill'
        };
        //triggers the $locationChangeStart event
        $location.search($httpParamSerializer(params));
    }

    /********************************* fin Change URL ********************************/
    $scope.uploadFiles = function () {
        $scope.fd = new FormData();
        if ($scope.files.length == 0) {
            $scope.changeURL();
        }
        else {
            $scope.files.forEach(function (file) {
                $scope.fd.set('files', file);
                var request = {
                    method: 'POST',
                    url: 'https://' + c.data.instanceName + '.service-now.com/api/now/attachment/file?table_name=' + c.data.table + '&table_sys_id=' + c.data.tableSys + '&file_name=' + file.name,
                    data: $scope.fd.get('files'),
                    headers: {
                        'Content-Type': file.type,
                        'Accept': 'application/json'
                    }
                };

                // SEND THE FILES.
                $http(request)
                    .success(function (d) {
                        var json_data = JSON.stringify(d);
                        json_data = JSON.parse(json_data);
                        c.data.action = 'append_image';
                        if (c.data.idUpdate != "-1") {
                            c.data.rec_id = c.data.idUpdate;
                        }
                        if (c.data.msg == "1") {
                            c.data.rec_id = c.data.id;
                        }
                        c.data.attachment_id = json_data.result.sys_id;
                        c.server.update().then(function () {
                            $scope.changeURL();
                            c.data.action = undefined;
                        })
                    })
                    .error(function (err) {
                        // On error code here
                    });

            });
        }

    }
    /*****Submit formulaire *************/
    $scope.submit_record = function () {
        /*********** Update */
        if (c.data.idUpdate != '-1') {
            c.data.action = 'update';
            c.data.idBill = c.data.sysBill;
        }
        /******* ADD  */
        if (c.data.idUpdate == '-1') {
            c.data.action = 'insert';
        }

        c.data.billable = $scope.data.billable;
        c.data.reimburse = $scope.data.reimburse;
        c.data.title = $scope.data.title;
        c.data.value = $scope.data.value;
        c.data.tips = $scope.data.tips;
        c.data.processdate = c.processd.value;
        c.data.datedd = c.dated.value;
        c.data.state = $scope.state;
        c.data.type = $scope.data.type;
        c.data.sheet = $scope.sheet;
        c.data.payment = $scope.payment;
        c.data.category = $scope.category;
        c.data.card = $scope.card;
        c.data.country = $scope.country;
        c.data.user = $scope.user;
        /***Merchant depuis list de choix */
        if (c.data.ok == false) {
            c.data.merchId = $scope.merchant;
        }
        /***Ajouter nouvelle merchant*/
        if (c.data.ok == true) {
            c.data.merchname = $scope.merchname;
            c.data.merchVat = $scope.merchVat;
            c.data.merchCity = $scope.merchCity;
            c.data.merchZipCode = $scope.merchZipCode;
        }

        c.server.update().then(function () {
            c.data.table = 'x_315710_expense_m_expense_bill';
            /**** Update */
            if (c.data.idUpdate != "-1") {
                c.data.tableSys = c.data.idBill;
            }
            /***ADD */
            if (c.data.idUpdate == "-1") {
                c.data.tableSys = c.data.id;
            }
            /***Methode uploadFiles  */
            $scope.uploadFiles();
            c.data.action = undefined;
        });

    };

    /********* test merch ******/
    function testExiste(ligne) {
        var res = {};
        var number = c.data.merch.length;
        var i = 0;
        var ok = false;
        while (i < number && !ok) {
            if (JaroWrinker(ligne.toUpperCase(), c.data.merch[i].name) > 0.80) {
                res = c.data.merch[i];
                ok = true;
            }
            else
                i++;
        }
        return res;
    }

    /********* test PAyment ******/
    function testExistePay(lignee) {
        var resPay = {};
        var number = c.data.payList.length;
        var i = 0;
        var ok = false;
        while (i < number && !ok) {
            var name = c.data.payList[i].name;
            var res = parseFloat("" + JaroWrinker(lignee.toUpperCase(), name.toUpperCase())).toFixed(1);
            if (res >= 0.7) {
                resPay = c.data.payList[i];
                ok = true;
            }
            i++;
        }
        return resPay;
    }
    //Test de Date 
    $scope.getDate = function (regex, str) {
        var m;
        var d;
        var flag = false;
        while ((m = regex.exec(str)) !== null) {
            // This is necessary to avoid infinite loops with zero-width matches
            if (m.index === regex.lastIndex) {
                regex.lastIndex++;
            } // The result can be accessed through the `m`-variable.
            var list = [
                'M/d/yyyy',
                'M/d/yy',
                'M/dd/yy',
                'MM/dd/yy',
                'MM/dd/yy',
                'MM/dd/yyyy',
                'yy/MM/dd',
                'L',
                'LL',
                'l',
                'll',
                'yyyy-MM-dd',
                'dd-MMM-yy',
                'DD-MM-YYYY'
            ];
            d = moment(m[0], list);
            if (d.isValid()) {
                flag = true;
            }
        }
        if (flag)
            return d;
    }

    findDuplicate = function (tab, obj) {
        tab.forEach(function (item) {
            var b = item + '' == obj + '';
            if (b)
                return true;
        });
        return false;
    }
    $scope.validateDate = function (str) {
        if (str.split('-').length == 3 |
            str.split(' ').length == 3 |
            str.split('.').length == 3 |
            str.split('/').length == 3)
            return true;
        else
            return false;
    }
    function convert(str) {
        var date = new Date(str),
            mnth = ("0" + (date.getMonth() + 1)).slice(-2),
            day = ("0" + date.getDate()).slice(-2);
        return [date.getFullYear(), mnth, day].join("-");
    }

    function lastIndexOfDigit(str) {
        var last_indices = [];
        [1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (digit) {
            last_indices.push(str.lastIndexOf(digit));
        });
        var indices = last_indices.sort(function (a, b) {
            return a - b;
        });
        return indices[indices.length - 1];
    }
    /********************Function of Similarity****************/
    function JaroWrinker(s1, s2) {
        var m = 0;
        // Exit early if either are empty.
        if (s1.length === 0 || s2.length === 0) {
            return 0;
        }
        // Exit early if they're an exact match.
        if (s1 === s2) {
            return 1;
        }
        var range = (Math.floor(Math.max(s1.length, s2.length) / 2)) - 1,
            s1Matches = new Array(s1.length),
            s2Matches = new Array(s2.length);
        for (i = 0; i < s1.length; i++) {
            var low = (i >= range) ? i - range : 0,
                high = (i + range <= s2.length) ? (i + range) : (s2.length - 1);
            for (j = low; j <= high; j++) {
                if (s1Matches[i] !== true && s2Matches[j] !== true && s1[i] === s2[j]) {
                    ++m;
                    s1Matches[i] = s2Matches[j] = true;
                    break;
                }
            }
        }
        // Exit early if no matches were found.
        if (m === 0) {
            return 0;
        }
        // Count the transpositions.
        var k = 0;
        var n_trans = 0;
        for (i = 0; i < s1.length; i++) {
            if (s1Matches[i] === true) {
                for (j = k; j < s2.length; j++) {
                    if (s2Matches[j] === true) {
                        k = j + 1;
                        break;
                    }
                }
                if (s1[i] !== s2[j]) {
                    ++n_trans;
                }
            }
        }
        var weight = (m / s1.length + m / s2.length + (m - (n_trans / 2)) / m) / 3,
            l = 0,
            p = 0.1;
        if (weight > 0.7) {
            while (s1[l] === s2[l] && l < 4) {
                ++l;
            }
            weight = weight + l * p * (1 - weight);
        }

        return weight;
    }

    /************************Convertion PDF Array****************************/
    function pdfAsArray(pdfAsArray) {
        var l = pdfjsLib.getDocument(pdfAsArray);
        l.promise.then(function (pdf) {
            var pdfDocument = pdf;
            // Create an array that will contain our promises
            var pagesPromises = [];
            for (var i = 1; i <= pdf.numPages; i++) {
                // Required to prevent that i is always the total of pages
                // Store the promise of getPageText that returns the text of a page
                pagesPromises.push(getPageText(i, pdfDocument));
            }
            // Execute all the promises
            Promise.all(pagesPromises).then(function (pagesText) {
                //var tab= new RegExp('[\r\n]');
                // e.g ["Text content page 1", "Text content page 2", "Text content page 3" ... ]
                var txt;
                pagesText.forEach(function (item) {
                    txt = item.split('  ');

                });
                txt.splice(0, ' ');
                for (var i = 0; i < txt.length; i++) {
                    var m = txt[i].split(' ');
                    var l;
                    txt[i].toUpperCase();
                    /************************ TOTAL ************************/
                    var ch = 'TOTAL';
                    if (txt[i].indexOf(ch) != -1) {
                        l = txt[i].substring(txt[i].indexOf(ch), txt[i].indexOf(ch) + ch.length + 50);
                    }
                    var ch2 = "PRIX";
                    if (txt[i].indexOf(ch2) != -1) {
                        l = txt[i].substring(txt[i].indexOf(ch2), txt[i].indexOf(ch2) + ch2.length + 50);
                    }
                    var ch3 = "TOTAL TTC";
                    if (txt[i].indexOf(ch3) != -1) {
                        l = txt[i].substring(txt[i].indexOf(ch3), txt[i].indexOf(ch3) + ch3.length + 50);
                    }

                    //Test pour récuperer Value
                    if (JaroWrinker(txt[i].toUpperCase(), 'TOTAL') > 0.70 || JaroWrinker(txt[i].toUpperCase(), 'PRIX') > 0.70 || JaroWrinker(txt[i].toUpperCase(), 'TOTAL TTC') > 0.70) {
                        var matches = l.match(/\d{1,3}[,\\.]?(\\d{1,2})?/g).join("");
                        var val = parseInt(matches + "", 10);
                        document.getElementById('value').value = val;
                        c.data.value = val;
                        /***************************TVA*********************************/
                        var tva = "TVA";
                        var t;
                        if (txt[i].indexOf(tva) != -1) {
                            t = txt[i].substring(txt[i].indexOf(tva), txt[i].indexOf(tva) + tva.length + 4);
                            var matches = t.match(/\d{1,3}[,\\.]?(\\d{1,2})?/g).join("");
                            var val = parseInt(matches + "", 10);
                            document.getElementById('vat').value = val;
                            c.data.value = val;
                        }
                    }
                    /************************ Mode de PAyment  ************************/
                    var testPay = testExistePay(txt[i]);
                    if (testPay.sys_id != null) {
                        //$('#payment').select2('val',testPay.sys_id );
                        $scope.payment = {
                            displayValue: c.data.payName,
                            value: c.data.paySysId,
                            name: 'c.data.payment'
                        };
                    }
                    /************************ Merchant ************************/
                    var test = testExiste(txt[i]);
                    if (test.name != null) {
                        merchId = test.sys_id;
                        $scope.merchant = {
                            displayValue: test.name,
                            value: merchId,
                            name: 'c.data.merchant'
                        }
                    }
                    /************************ Date  ************************/
                    var rech = "Emise le";
                    var pos = txt[i].indexOf(rech); //+rech.length
                    var o = txt[i].substring(pos, pos + rech.length + 11);
                    var ddd = o.match("[0-9]{2}([\-\/\ \.])[0-9]{2}[\-\/\ \.][0-9]{4}");
                    if (ddd != null) {
                        var date = ddd[0].split('/');
                        var m = moment(ddd[0]).format("YYYY-MM-DD");
                        document.getElementById('sp_formfield_').value = m;
                        c.dated.value = m;
                        console.log("date 2: " + c.dated.value);
                    }
                    else {
                        var dates = [];
                        var dd = txt[i].match("([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}");
                        if (dd != null) {
                            var regex = /[0-9]{1,4}(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}/mg;
                            var regex2 = /([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)[0-9]{1,4}(\-|\/|\. |\ )[0-9]{1,4}/mg;
                            var s = $scope.getDate(regex, txt[i]);
                            if (s != undefined) {
                                if ($scope.validateDate(s._i)) {
                                    if (!findDuplicate(dates, s)) {
                                        dates.push(s._i);
                                    }
                                }
                                s = $scope.getDate(regex2, txt[i]);
                                if ($scope.validateDate(s._i)) {
                                    if (!findDuplicate(dates, s)) {
                                        dates.push(s._i);
                                        var r = convert(s);
                                        document.getElementById('sp_formfield_c.data.dated').value = r;
                                        c.dated.value = m;
                                        console.log("date 2: " + c.dated.value);
                                    }
                                }
                            }
                        }
                        //Date
                        if (txt[i].indexOf("DATE") != -1) {
                            l = model.substring(txt[i].indexOf("DATE"), txt[i].indexOf(lastIndexOfDigit(txt[i])));

                        }
                    }
                }
            });

        }, function (reason) {
        });
    }

    //Convertion To Binary
    function convertDataURIToBinary(dataURI) {
        var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
        var base64 = dataURI.substring(base64Index);
        var raw = window.atob(base64);
        var rawLength = raw.length;
        var array = new Uint8Array(new ArrayBuffer(rawLength));
        for (var i = 0; i < rawLength; i++) {
            array[i] = raw.charCodeAt(i);
        }
        pdfAsArray(array);
    }

    // Return Text Of Page
    function getPageText(pageNum, PDFDocumentInstance) {
        // Return a Promise that is solved once the text of the page is retrieven
        return new Promise(function (resolve, reject) {
            PDFDocumentInstance.getPage(pageNum).then(function (pdfPage) {
                // The main trick to obtain the text of the PDF page, use the getTextContent method
                pdfPage.getTextContent().then(function (textContent) {
                    var textItems = textContent.items;
                    var finalString = "";
                    // Concatenate the string of the item to the final string
                    for (var i = 0; i < textItems.length; i++) {
                        var item = textItems[i];
                        finalString += item.str + " ";
                    }
                    // Solve promise with the text retrieven from the page
                    resolve(finalString);
                });
            });
        });
    }
    //Compare
    function compare_n_save(pdfArrayOfObject) {
        var arr3 = pdfArrayOfObject;
        datass.push(arr3);
    }
}


]]></client_script>
        <controller_as>c</controller_as>
        <css>.al {
    width: 90%;
}

.lab {
    max-width: 1000% !important;
}

.la {
    width: 100%;
    margin-right: 100px;
    margin-left: 90px;
}

.form-row&gt;.col,
.form-row&gt;[class*="col-"] {
    padding-right: 50px !important;
    padding-left: 20px !important;
    padding-top: 20px !important;
}

.form-horizontal .form-group {
    /* margin-left: -15px; */
    margin-right: -15px !important;
}

.annimate {
    background-size: 30px 30px;
    background-image: -webkit-linear-gradient(135deg, #F6F6F6 25%, transparent 25%, transparent 50%, #F6F6F6 50%, #F6F6F6 75%, transparent 75%, transparent);
    background-image: linear-gradient(-45deg, #F6F6F6 25%, transparent 25%, transparent 50%, #F6F6F6 50%, #F6F6F6 75%, transparent 75%, transparent);
    -webkit-animation: stripes 2s linear infinite;
    animation: stripes 2s linear infinite
}

.file {
    padding: 1rem 1rem;
    font-size: 1.25rem;
    line-height: 1.5;
    border-radius: 0.3rem;
    width: 300px;
    height: 300px;
}

.send {
    padding: 0.5rem 1rem;
    font-size: 1.25rem;
    line-height: 1.5;
    border-radius: 0.3rem;
    width: 100%;
}

.white {
    color: #fff;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>expense_bill_form2</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>expense_bill_form2</name>
        <option_schema>[{"name":"sys_id","section":"other","label":"sys_id","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    /* widget controller */


    data.idUpdate = input.sys_id;
    /***************Update Bill*******************************/
    var merch = new GlideRecord("x_315710_expense_m_merchant");
    var categ = new GlideRecord("x_315710_expense_m_category");
    var count = new GlideRecord("core_country");
    var sheet = new GlideRecord("x_315710_expense_m_expense_sheet");
    var p = new GlideRecord('x_315710_expense_m_payment_instrument');
    var card = new GlideRecord("x_315710_expense_m_rate");
    data.table = 'x_315710_expense_m_expense_bill';
    var gr = new GlideRecord(data.table);
/********************* UPDATE  */
    if (data.idUpdate != "-1") {
        var usertab = new GlideRecord('sys_user');
        data.instanceName = gs.getProperty('instance_name');
        gr.get(input.sys_id);
        data.sysBill = input.sys_id;
        gs.warn("remplir formulaire : " + data.sysBill);
        data.title = gr.getDisplayValue("title");
        gs.warn('script called on start ' + gr.sys_id);
       
        /*bill*/
        data.value = parseFloat(gr.getValue('value'));
        gs.warn("Value : " + data.value);
        data.vat = parseInt(gr.getValue("vat"));
        data.tips = parseFloat(gr.getValue("tips"));
        data.datedd = gr.getDisplayValue("date");
        data.image = gr.getDisplayValue("image");
        data.state = gr.getDisplayValue("state_bill");
        /* Payment */
        data.user = gr.getValue("user");
        usertab.get(data.user);
        data.userName = usertab.getValue("name");
        data.userId = usertab.getValue("sys_id");
        /* Sheet */
        data.sheet = gr.getValue("expense_sheet");
        sheet.get(data.sheet);
        data.sheetName = sheet.getValue("name");
        data.sheetId = sheet.getValue("sys_id");
        /*Payment*/
        data.payment = gr.getValue("payment_instrument");
        p.get(data.payment);
        data.paymentName = p.getValue("name");
        /*Country*/
        data.country = gr.getValue("country");
        count.get(data.country);
        data.countryName = count.getDisplayValue("name");
        /*Category*/
        data.category = gr.getValue("category");
        categ.get(data.category);
        data.categoryName = categ.getDisplayValue("name");
        /*Card*/
        data.card = gr.getValue("rate_card");
        card.get(data.card);
        data.cardName = card.getValue("name");
        data.country = gr.getValue("country");
        data.reimburse = gr.getValue("to_reimburse");
        data.billable = gr.getValue("billable_to_client");
        data.type = gr.getDisplayValue("type_bill");
        data.processdd = gr.getDisplayValue("process_date");
        /*Merchant*/
        var idMerch = gr.getValue("merchant");
        if (idMerch != null) {
            merch.get("sys_id", idMerch);
            data.merchId = idMerch;
            data.merchnamee = merch.getDisplayValue("name");
        }

        /** Get uSer Connecter **/
        var user = gs.getUserID();
        gs.warn("user sys_id: " + user.street + " , " + user.city);
        var myUserObject = gs.getUser();
        data.userCon = user;
        data.userConName = myUserObject.name;
        /**list of merchant */
        data.merch = [];
        merch.query();
        while (merch.next()) {
            merchobj = {};
            $sp.getRecordValues(merchobj, merch, "sys_id,name,city,vat_number,zip_code")
            data.merch.push(merchobj);
        }

        /****** Liste des payment *****/
        data.payList = [];
        p.query();
        while (p.next()) {
            payObj = {};
            $sp.getRecordValues(payObj, p, "name,sys_id");
            data.payList.push(payObj);
        }
        /**update */
        if (input && input.action == 'update') {
            var grr = new GlideRecord(data.table);
            data.merchZipCode = input.merchZipCode;
            data.merchCity = input.merchCity;
            data.merchVat = input.merchVat;
            data.merchName = input.merchname;
            var idM;
            if (input.ok == false) {
                gr.merchant = input.merchId.value;
            } 
            /*Add new merchant*/
            else if (input.ok == true) {
                data.merchZipCode = input.merchZipCode;
                data.merchCity = input.merchCity;
                data.merchVat = input.merchVat;
                data.merchName = input.merchname;
                merch.vat_number = data.merchVat;
                merch.name = data.merchName;
                merch.city = data.merchCity;
                merch.zip_code = data.merchZipCode;
                merch.vat_number = data.merchVat;
                idM = merch.insert();
                gr.merchant = idM;
            }
            data.idBill = input.idBill;
            grr.get(data.idBill);
            grr.title = input.title;
            grr.value = input.value;
            grr.state_bill = input.state;
            grr.process_date = input.processdate;
            grr.date = input.datedd;
            grr.type_bill = input.type;
            grr.tips = input.tips;
            grr.expense_sheet = input.sheet.value;
            grr.payment_instrument = input.payment.value;
            grr.category = input.category.value;
            grr.country = input.country.value;
            grr.user = input.user.value;
            grr.billable_to_client = input.billable;
            grr.to_reimburse = input.reimburse;
            grr.vat = input.vat;
            grr.update();
        }

    }

    /***************End Update********************************/
    /**************************************** If Add New Bill**********************************************/
    data.userId = gs.getUserID();
    data.userName = gs.getUserDisplayName();
    /*****Default value in form */
    categ.addQuery("name", 'Miels');
    categ.query();
    while (categ.next()) {
        gs.warn("whiel");
        data.categSysId = categ.getDisplayValue("sys_id");
        data.categName = categ.getDisplayValue("name");
        gs.warn("cat : " + data.categSysId + " , " + data.categName);
    }
    p.addActiveQuery("name", 'Cash');
    p.query();
    while (p.next()) {
        data.paySysId = p.getDisplayValue("sys_id");
        data.payName = p.getDisplayValue("name");
    }
    data.reimburse = true;
    data.vat = 0;
    data.state = "Pending";
    data.type = "Opex";
    data.confirmAdd = "";
    data.table = 'x_315710_expense_m_expense_bill';
    data.instanceName = gs.getProperty('instance_name');
    data.merch = [];
    merch.query();
    while (merch.next()) {
        merchobj = {};
        $sp.getRecordValues(merchobj, merch, "sys_id,name,city,vat_number,zip_code")
        data.merch.push(merchobj);
    }
    /****** Liste des payment *****/
    data.payList = [];
    var pp = new GlideRecord('x_315710_expense_m_payment_instrument');
    pp.query();
    while (pp.next()) {
        payObj = {};
        $sp.getRecordValues(payObj, pp, "name,sys_id");
        data.payList.push(payObj);
    }

    if (input && input.action == "insert") {
        data.title = input.title;
        /*bill*/
        data.value = input.value;
        data.vat = input.vat;
        data.tips = input.tips;
        data.process = input.processdate;
        data.payment = input.payment;
        data.category = input.category;
        data.user = input.user;
        data.card = input.card;
        data.dateddd = input.datedd;
        data.state = input.state;
        data.sheet = input.sheet;
        data.country = input.country;
        data.reimburse = input.reimburse;
        data.billable = input.billable;
        data.type = input.type;
        var gr = new GlideRecord(data.table);
        var idM;
        if (input.ok == false) {
            gr.merchant = input.merchId.value;
        } else if (input.ok == true) {
            data.merchZipCode = input.merchZipCode;
            data.merchCity = input.merchCity;
            data.merchVat = input.merchVat;
            data.merchName = input.merchname;
            merch.vat_number = data.merchVat;
            merch.name = data.merchName;
            merch.city = data.merchCity;
            merch.zip_code = data.merchZipCode;
            merch.vat_number = data.merchVat;
            idM = merch.insert();
            gr.merchant = idM;
        }
        /*Add Bill*/
        gr.title = data.title;
        gr.value = data.value;
        gr.state_bill = data.state;
        gr.process_date = data.process;
        gr.date = data.dateddd;
        gr.type_bill = data.type;
        gr.tips = data.tips;
        gr.expense_sheet = data.sheet.value;
        gr.payment_instrument = data.payment.value;
        gr.category = data.category.value;
        gr.country = data.country.value;
        gr.user = data.user.value;
        gr.billable_to_client = data.billable;
        gr.to_reimburse = data.reimburse;
        gr.vat = data.vat;
        var idd = gr.insert();
        data.id = idd;
        data.msg = "1";
    }
    /********************************************************End Add Bill***********************************/
    /***************Image*****************/
    if (input && input.action == 'append_image') {
        gs.warn('append started by attach : ' + input.attachment_id + ' and id is : ' + input.rec_id);
        if (input.rec_id && input.attachment_id) {
            var r = new GlideRecord(data.table);
            r.get(input.rec_id);
            r.image = input.attachment_id;
            var ress = r.update();
            gs.warn('saved  : ' + ress);
            gs.addInfoMessage("Success");
        }
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-01-21 14:30:33</sys_created_on>
        <sys_id>dfd86960dba60010256528df4b961925</sys_id>
        <sys_mod_count>394</sys_mod_count>
        <sys_name>expense_bill_form2</sys_name>
        <sys_package display_value="Expense Management" source="x_315710_expense_m">ea3c9ce91b0cfb0072fe2136ec4bcb50</sys_package>
        <sys_policy/>
        <sys_scope display_value="Expense Management">ea3c9ce91b0cfb0072fe2136ec4bcb50</sys_scope>
        <sys_update_name>sp_widget_dfd86960dba60010256528df4b961925</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-02-03 10:36:55</sys_updated_on>
        <template><![CDATA[<!-- CDN PDFJS -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.2.2/pdf.js"></script>
<!-- fin-->

<script src='https://cdn.jsdelivr.net/gh/naptha/tesseract.js@v1.0.14/dist/tesseract.min.js'></script>
  <!-- Begin Page Content -->
        <div class="container-fluid">
     

            <div class="col s12 m6 l10">
             <h6 ng-if="c.data.idUpdate != -1"class="card-title">Update Expense Bill {{c.data.updateName}}</h6>
                <h6 ng-if="c.data.idUpdate == -1" class="card-title">Add Expense Bill</h6>
          
                <hr size="1">
            </div>
           
            <form>
          
          <div class="row">
    <div class="col-md-8">
                <div class="form-row">
                    <div class="form-group col-sm-6">
                        <label for="Title">Title <span style="color:red;">*</span>  </label>
                        <input id="Title" type="text" placeholder="" class="form-control" name="title" ng-model="c.data.title" required>
                    </div>
                    <div class="form-group col-sm-6">
                        <label for="cat">Category</label>
                        <sn-record-picker  id="cat"field="category" table="'x_315710_expense_m_category'" display-field="'name'" value-field="'sys_id'" search-fields="'name'"
                        page-size="100"></sn-record-picker>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-sm-6">
                        <label for="value">Value<span style="color:red;"> *</span>  </label>
                        <input id="value" type="number" class="form-control" name="value" ng-model="c.data.value">
                    </div>
                    <div class="form-group col-sm-6">
                        <label for="cat">Date<span style="color:red;">*</span> </label>
                      <div class="al">
                         <sp-date-picker ng-change="c.dateChange()" field="c.dated" ng-model="c.dated.value"></sp-date-picker>
                      </div>
                       
                    </div>
                </div>

              <div class="form-row">
                    <div class="form-group col-sm-6">
                        <label for="value">Payment Instrument </label>
                        <sn-record-picker field="payment" table="'x_315710_expense_m_payment_instrument'" display-field="'name'" value-field="'sys_id'"
                            search-fields="'name'" page-size="100" default-query="c.assigned_to_query"></sn-record-picker>
                    </div>
                      <div class="form-group col-sm-6">
                        <label for="cat">State</label>
                        <select class="form-control" name="state" id="state" ng-model="c.data.state">
                            <option value="Pending">Pending</option>
                            <option value="Processed">Processed</option>
                        </select>
                    </div>
                </div>

              <!-- <div class="form-row">
                    <div class="form-group col-sm-4">
                        <label for="value">Image  <span style="color:red;">*</span>
                        </label>
                        <label class="btn btn-info btn-lg ">
                            <span>
                                <i class="glyphicon glyphicon-paperclip" aria-hidden="true"></i>
                                <b>Choose file</b>
                            </span>
                            <input  type="file" style='opacity:0; width:0px; height:0px;' id="fileToUpload" ng-model="c.data.file" name='file' onchange="angular.element(this).scope().setFiles(this)"
                                required/>
                        </label>
                    </div>
                   
                </div>-->

              <div class="form-row">
                    <div class="form-group col-sm-12">
                        <label for="sheet">Expense Sheet<span style="color:red;">*</span>  </label>
                        <sn-record-picker field="sheet" table="'x_315710_expense_m_expense_sheet'" display-field="'name'" value-field="'sys_id'"
                        search-fields="'name'" page-size="100" id="sheet"></sn-record-picker>
                    </div>
                 
                </div>
      <div class="form-check ">
                        <input   type="checkbox" ng-model="c.data.reimburse" class="form-check-input position-static" id="reimburse" value="r" ng-checked="data.reimburse == true"/>
                      <label class="form-check-label" for="reimburse">   To Reimburse</label>
                	
      </div>
       <div class="form-check ">
                        <input type="checkbox" ng-model="c.data.billable" class="form-check-input position-static" id="billable" value="b"  ng-checked="data.billable == true"/>
                  <label class="form-check-label" for="billable">   Billable to client</label>
          </div>
               <div class="form-row">
              <div class="col-md-4 mb-2">
                <button  class="btn btn-info send " ng-click="submit_record()"
                type="submit" name="action"><spam > Submit </spam> </button>
              </div>
                 
                   

              </div>
             
         
            </div>
            <div class="col-md-4">
    <div>
     
                    <div  ng-if="c.data.idUpdate == -1">
        <img id="image_show" class="annimate" width="300px" height="360px" >
        </div>
   <div ng-if="c.data.idUpdate != -1" >
      <img id="image_show" class="annimate" width="300px" height="360px" ng-src="{{::data.image}}"  />
        </div>
      <br>
          <div class="col-md-4 la">
       
      
                        <label class="btn btn-info lab">
                            <span>
                                <i class="glyphicon glyphicon-paperclip" aria-hidden="true"></i>
                                <b>Choose file</b>
                            </span>
                            <input  type="file" style='opacity:0; width:0px; height:0px;' id="fileToUpload" ng-model="c.data.file" name='file' onchange="angular.element(this).scope().setFiles(this)"
                                required/>
                </label></div>
      
              </div>
            </div>
          
              
         
              
              </div>
                </form>
               
</div>
]]></template>
    </sp_widget>
</record_update>
