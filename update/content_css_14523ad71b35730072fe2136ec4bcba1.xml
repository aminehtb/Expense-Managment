<?xml version="1.0" encoding="UTF-8"?><record_update table="content_css">
    <content_css action="INSERT_OR_UPDATE">
        <name>dashboard-modern</name>
        <style>// Dashboard - Modern&#13;
//----------------------&#13;
&#13;
(function (window, document, $) {&#13;
    &#13;
    var CurrentBalanceDonutChart = new Chartist.Pie(&#13;
        "#current-balance-donut-chart",&#13;
        {&#13;
            labels: [1, 2],&#13;
            series: [{ meta: "Completed", value: 80 }, { meta: "Remaining", value: 20 }]&#13;
        },&#13;
        {&#13;
            donut: true,&#13;
            donutWidth: 8,&#13;
            showLabel: false,&#13;
            plugins: [&#13;
                Chartist.plugins.tooltip({ class: "current-balance-tooltip", appendToBody: true }),&#13;
                Chartist.plugins.fillDonut({&#13;
                    items: [&#13;
                        {&#13;
                            content: '&lt;p class="small"&gt;Balance&lt;/p&gt;&lt;h5 class="mt-0 mb-0"&gt;$ 10k&lt;/h5&gt;'&#13;
                        }&#13;
                    ]&#13;
                })&#13;
            ]&#13;
        }&#13;
    )&#13;
&#13;
&#13;
    // Total Transaction&#13;
    // -----------------&#13;
    var TotalTransactionLine = new Chartist.Line(&#13;
        "#total-transaction-line-chart",&#13;
        {&#13;
            series: [[3, 10, 4, 20, 7, 45, 5, 35, 20, 48, 30, 50]]&#13;
        },&#13;
        {&#13;
            chartPadding: 0,&#13;
            axisX: {&#13;
                showLabel: true,&#13;
                showGrid: false&#13;
            },&#13;
            axisY: {&#13;
                showLabel: true,&#13;
                showGrid: true,&#13;
                low: 0,&#13;
                high: 50,&#13;
                scaleMinSpace: 40&#13;
            },&#13;
            lineSmooth: Chartist.Interpolation.simple({&#13;
                divisor: 2&#13;
            }),&#13;
            plugins: [Chartist.plugins.tooltip({ class: "total-transaction-tooltip", appendToBody: true })],&#13;
            fullWidth: true&#13;
        }&#13;
    );&#13;
&#13;
    TotalTransactionLine.on("created", function (data) {&#13;
        var defs = data.svg.querySelector("defs") || data.svg.elem("defs");&#13;
        defs&#13;
            .elem("linearGradient", {&#13;
                id: "lineLinearStats",&#13;
                x1: 0,&#13;
                y1: 0,&#13;
                x2: 1,&#13;
                y2: 0&#13;
            })&#13;
            .elem("stop", {&#13;
                offset: "0%",&#13;
                "stop-color": "rgba(255, 82, 249, 0.1)"&#13;
            })&#13;
            .parent()&#13;
            .elem("stop", {&#13;
                offset: "10%",&#13;
                "stop-color": "rgba(255, 82, 249, 1)"&#13;
            })&#13;
            .parent()&#13;
            .elem("stop", {&#13;
                offset: "30%",&#13;
                "stop-color": "rgba(255, 82, 249, 1)"&#13;
            })&#13;
            .parent()&#13;
            .elem("stop", {&#13;
                offset: "95%",&#13;
                "stop-color": "rgba(133, 3, 168, 1)"&#13;
            })&#13;
            .parent()&#13;
            .elem("stop", {&#13;
                offset: "100%",&#13;
                "stop-color": "rgba(133, 3, 168, 0.1)"&#13;
            });&#13;
&#13;
        return defs;&#13;
&#13;
    }).on("draw", function (data) {&#13;
        var circleRadius = 5;&#13;
        if (data.type === "point") {&#13;
            var circle = new Chartist.Svg("circle", {&#13;
                cx: data.x,&#13;
                cy: data.y,&#13;
                "ct:value": data.y,&#13;
                r: circleRadius,&#13;
                class: data.value.y === 35 ? "ct-point ct-point-circle" : "ct-point ct-point-circle-transperent"&#13;
            });&#13;
            data.element.replace(circle);&#13;
        }&#13;
    });&#13;
&#13;
&#13;
&#13;
    // User Statics&#13;
    var UserStatisticsBarChart = new Chartist.Bar(&#13;
        "#user-statistics-bar-chart",&#13;
        {&#13;
            labels: ["B1", "B2", "B3", "B4", "B5", "B6"],&#13;
            series: [[4000, 8000, 12000, 14000, 12000, 18000], [5000, 10000, 13000, 12000, 11000, 15000]]&#13;
        },&#13;
        {&#13;
            // Default mobile configuration&#13;
            stackBars: true,&#13;
            chartPadding: 0,&#13;
            axisX: {&#13;
                showGrid: false&#13;
            },&#13;
            axisY: {&#13;
                showGrid: false,&#13;
                labelInterpolationFnc: function (value) {&#13;
                    return value / 1000 + "k";&#13;
                },&#13;
                scaleMinSpace: 50&#13;
            },&#13;
            plugins: [Chartist.plugins.tooltip({ class: "user-statistics-tooltip", appendToBody: true })]&#13;
        },&#13;
        [&#13;
            // Options override for media &gt; 800px&#13;
            [&#13;
                "screen and (min-width: 800px)",&#13;
                {&#13;
                    stackBars: false,&#13;
                    seriesBarDistance: 10&#13;
                }&#13;
            ],&#13;
            // Options override for media &gt; 1000px&#13;
            [&#13;
                "screen and (min-width: 1000px)",&#13;
                {&#13;
                    reverseData: false,&#13;
                    horizontalBars: false,&#13;
                    seriesBarDistance: 15&#13;
                }&#13;
            ]&#13;
        ]&#13;
    );&#13;
&#13;
    UserStatisticsBarChart.on("draw", function (data) {&#13;
        if (data.type === "bar") {&#13;
            data.element.attr({&#13;
                style: "stroke-width: 12px",&#13;
                x1: data.x1 + 0.001&#13;
            });&#13;
            data.group.append(&#13;
                new Chartist.Svg(&#13;
                    "circle",&#13;
                    {&#13;
                        cx: data.x2,&#13;
                        cy: data.y2,&#13;
                        r: 6&#13;
                    },&#13;
                    "ct-slice-pie"&#13;
                )&#13;
            );&#13;
            data.element.animate({&#13;
                y2: {&#13;
                    begin: 500,&#13;
                    dur: 500,&#13;
                    from: data.y1,&#13;
                    to: data.y2&#13;
                }&#13;
            });&#13;
&#13;
&#13;
        }&#13;
    });&#13;
&#13;
    UserStatisticsBarChart.on("created", function (data) {&#13;
        var defs = data.svg.querySelector("defs") || data.svg.elem("defs");&#13;
        defs&#13;
            .elem("linearGradient", {&#13;
                id: "barGradient1",&#13;
                x1: 0,&#13;
                y1: 0,&#13;
                x2: 0,&#13;
                y2: 1&#13;
            })&#13;
            .elem("stop", {&#13;
                offset: 0,&#13;
                "stop-color": "rgba(255,75,172,1)"&#13;
            })&#13;
            .parent()&#13;
            .elem("stop", {&#13;
                offset: 1,&#13;
                "stop-color": "rgba(255,75,172, 0.6)"&#13;
            });&#13;
&#13;
        defs&#13;
            .elem("linearGradient", {&#13;
                id: "barGradient2",&#13;
                x1: 0,&#13;
                y1: 0,&#13;
                x2: 0,&#13;
                y2: 1&#13;
            })&#13;
            .elem("stop", {&#13;
                offset: 0,&#13;
                "stop-color": "rgba(129,51,255,1)"&#13;
            })&#13;
            .parent()&#13;
            .elem("stop", {&#13;
                offset: 1,&#13;
                "stop-color": "rgba(129,51,255, 0.6)"&#13;
            });&#13;
        return defs;&#13;
    });&#13;
&#13;
    // Conversion Ratio&#13;
    var ConversionRatioBarChart = new Chartist.Bar(&#13;
        "#conversion-ration-bar-chart",&#13;
        {&#13;
            labels: ["Q1"],&#13;
            series: [[55000], [35000], [10000]]&#13;
        },&#13;
        {&#13;
            stackBars: true,&#13;
            chartPadding: {&#13;
                top: 0,&#13;
                right: 50,&#13;
                bottom: 0,&#13;
                left: 0&#13;
            },&#13;
            axisX: {&#13;
                showLabel: false,&#13;
                showGrid: false&#13;
            },&#13;
            axisY: {&#13;
                showGrid: false,&#13;
                labelInterpolationFnc: function (value) {&#13;
                    return value / 1000 + "k";&#13;
                }&#13;
            },&#13;
            plugins: [Chartist.plugins.tooltip({ class: "user-statistics-tooltip", appendToBody: true })]&#13;
        }&#13;
    );&#13;
    ConversionRatioBarChart.on("draw", function (data) {&#13;
        if (data.type === "bar") {&#13;
            data.element.attr({&#13;
                style: "stroke-width: 40px",&#13;
                x1: data.x1 + 0.001&#13;
            });&#13;
            data.group.append(&#13;
                new Chartist.Svg("circle", {&#13;
                    cx: data.x2,&#13;
                    cy: data.y2&#13;
                })&#13;
            );&#13;
&#13;
&#13;
            data.element.animate({&#13;
                y2: {&#13;
                    begin: 500,&#13;
                    dur: 500,&#13;
                    from: data.y1,&#13;
                    to: data.y2,&#13;
                    easing: Chartist.Svg.Easing.easeInBounce&#13;
                }&#13;
            });&#13;
        }&#13;
    });&#13;
&#13;
    ConversionRatioBarChart.on("created", function (data) {&#13;
        var defs = data.svg.querySelector("defs") || data.svg.elem("defs");&#13;
        defs&#13;
            .elem("linearGradient", {&#13;
                id: "barGradient1",&#13;
                x1: 0,&#13;
                y1: 0,&#13;
                x2: 0,&#13;
                y2: 1&#13;
            })&#13;
            .elem("stop", {&#13;
                offset: 0,&#13;
                "stop-color": "rgba(129,51,255,1)"&#13;
            })&#13;
            .parent()&#13;
            .elem("stop", {&#13;
                offset: 1,&#13;
                "stop-color": "rgba(129,51,255, 0.6)"&#13;
            });&#13;
&#13;
        defs&#13;
            .elem("linearGradient", {&#13;
                id: "barGradient2",&#13;
                x1: 0,&#13;
                y1: 0,&#13;
                x2: 0,&#13;
                y2: 1&#13;
            })&#13;
            .elem("stop", {&#13;
                offset: 0,&#13;
                "stop-color": "rgba(255,75,172,1)"&#13;
            })&#13;
            .parent()&#13;
            .elem("stop", {&#13;
                offset: 1,&#13;
                "stop-color": "rgba(255,75,172, 0.6)"&#13;
            });&#13;
        return defs;&#13;
    });&#13;
&#13;
    //Sampel Line Chart Three&#13;
&#13;
    // Options&#13;
    var SLOption = {&#13;
        responsive: true,&#13;
        maintainAspectRatio: true,&#13;
        datasetStrokeWidth: 3,&#13;
        pointDotStrokeWidth: 4,&#13;
        tooltipFillColor: "rgba(0,0,0,0.6)",&#13;
        legend: {&#13;
            display: false,&#13;
            position: "bottom"&#13;
        },&#13;
        hover: {&#13;
            mode: "label"&#13;
        },&#13;
        scales: {&#13;
            xAxes: [&#13;
                {&#13;
                    display: false&#13;
                }&#13;
            ],&#13;
            yAxes: [&#13;
                {&#13;
                    display: false&#13;
                }&#13;
            ]&#13;
        },&#13;
        title: {&#13;
            display: false,&#13;
            fontColor: "#FFF",&#13;
            fullWidth: false,&#13;
            fontSize: 40,&#13;
            text: "82%"&#13;
        }&#13;
    };&#13;
    var SLlabels = ["January", "February", "March", "April", "May", "June"];&#13;
&#13;
    var LineSL3ctx = document.getElementById("custom-line-chart-sample-three").getContext("2d");&#13;
&#13;
    var gradientStroke = LineSL3ctx.createLinearGradient(500, 0, 0, 200);&#13;
    gradientStroke.addColorStop(0, "#8133ff");&#13;
    gradientStroke.addColorStop(1, "#ff4bac");&#13;
&#13;
    var gradientFill = LineSL3ctx.createLinearGradient(500, 0, 0, 200);&#13;
    gradientFill.addColorStop(0, "#8133ff");&#13;
    gradientFill.addColorStop(1, "#ff4bac");&#13;
&#13;
    var SL3Chart = new Chart(LineSL3ctx, {&#13;
        type: "line",&#13;
        data: {&#13;
            labels: SLlabels,&#13;
            datasets: [&#13;
                {&#13;
                    label: "My Second dataset",&#13;
                    borderColor: gradientStroke,&#13;
                    pointColor: "#fff",&#13;
                    pointBorderColor: gradientStroke,&#13;
                    pointBackgroundColor: "#fff",&#13;
                    pointHoverBackgroundColor: gradientStroke,&#13;
                    pointHoverBorderColor: gradientStroke,&#13;
                    pointRadius: 4,&#13;
                    pointBorderWidth: 1,&#13;
                    pointHoverRadius: 4,&#13;
                    pointHoverBorderWidth: 1,&#13;
                    fill: true,&#13;
                    backgroundColor: gradientFill,&#13;
                    borderWidth: 1,&#13;
                    data: [24, 18, 20, 30, 40, 43]&#13;
                }&#13;
            ]&#13;
        },&#13;
        options: SLOption&#13;
    });&#13;
})(window, document, jQuery);</style>
        <sys_class_name>content_css</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-06-08 05:56:46</sys_created_on>
        <sys_id>14523ad71b35730072fe2136ec4bcba1</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>dashboard-modern</sys_name>
        <sys_package display_value="Expense Management" source="x_315710_expense_m">ea3c9ce91b0cfb0072fe2136ec4bcb50</sys_package>
        <sys_policy/>
        <sys_scope display_value="Expense Management">ea3c9ce91b0cfb0072fe2136ec4bcb50</sys_scope>
        <sys_update_name>content_css_14523ad71b35730072fe2136ec4bcba1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-06-11 08:28:02</sys_updated_on>
        <type>local</type>
        <url/>
    </content_css>
</record_update>
