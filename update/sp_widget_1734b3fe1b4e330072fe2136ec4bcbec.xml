<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope,$http ,$rootScope,glideUserSession) {	
	var c = this;
	var merchId =null ;
	console.log(c.data.sysBill);
	
	
	
	glideUserSession.loadCurrentUser().then(function(currentUser) {
		//c.data.role = currentUser.hasRoleFromList('x_315710_expense_m.employee, x_315710_expense_m.manager');
		c.data.role = currentUser.hasRoleFromList('admin');

		c.data.name = currentUser.getFullName();


	});
	c.data.ok = false;
	$scope.addMerchant=function(){
		c.data.ok = true ;
		merchId = null ; 
		$scope.merchant = {
			displayValue:'',
			value: '',
			name:'c.data.merchant'
		}
	}


	
	var BASE64_MARKER = ';base64,';
	$scope.files = []; 



	$scope.getFields=function(){
		c.data.ok = false ;
		
	}
	$scope.testFile = function(){
		var ok = false ; 
		if(c.data.file == null)
		{ 
			alert("validation failed false");
			ok = true;
		}
		return ok ;
	}
	$scope.testComplete = function(){
		var ok = false ; 
		//if( c.data.scanFinish && c.data.value && c.data.title && $scope.sheet  && $scope.dated ){
		if( c.data.value && c.data.title && $scope.sheet  && $scope.dated ){
				
		ok = true ;
		}
		return ok ;
	}
	

	$scope.files = []; 
	/*****User*****/
	$scope.user = {
		displayValue:c.data.userName,
		value: c.data.userId ,
		name:'c.data.user'
	};

	$scope.category = {

		displayValue: c.data.categoryName,

		value: c.data.category,

		name: 'c.data.category'

	};
	$scope.sheet = {

		displayValue: c.data.sheetName,

		value: c.data.sheet,

		name: 'c.data.sheet'

	};
	$scope.country = {

		displayValue: c.data.countryName,

		value: c.data.country,

		name: 'c.data.country'

	};
	$scope.payment = { 
		displayValue:c.data.paymentName,
		value:c.data.payment ,
		name:'c.data.payment'
	}
		
	$scope.merchant = {
			displayValue:c.data.merchnamee,
			value: c.data.merchId,
			name:'c.data.merchant'
		}

	$scope.processd = {
		displayValue:new Date().toString(),
		value: new Date().toString(),
		name:'processd'
	};	

	c.action = function(action) {
		c.data.action = action;

		c.server.update().then(function() {
			c.data.action = undefined;
		})
	}
	//Traitement D'image 
	$scope.setFiles = function(element) {
		$scope.$apply(function() {
			c.data.show_progress = true ;
			var dates=[];
			for (var i = 0; i < element.files.length; i++) {

				var type = element.files[i].type;
				$scope.files.push(element.files[i]);
				var datass = []; 
				pdfjsLib.GlobalWorkerOptions.workerSrc='https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.2.2/pdf.worker.js';   
				if( type  == 'application/pdf')
				{
					c.data.scanFinish = false ;
					var input =element.files[i];
					var fReader = new FileReader();
					fReader.readAsDataURL(input);
					fReader.onloadend = function (event) {
						convertDataURIToBinary(event.target.result);
						c.data.scanFinish = true ;
						c.data.show_progress = false ;
					}
				}
				if (type == 'image/jpeg'){
					c.data.scanFinish = false ;
					//Tesseract : SCan Image
					Tesseract.recognize(element.files[i])
						.then(function(result){

						//Parcour line result
						for(var i=0 ; i<result.lines.length;i++){	
							var model = result.lines[i].text ;
							//Merchant
							var test = testExiste(model);
							if (test.name != null){
								merchId = test.sys_id ; 
								/*document.getElementById('merchName').value =test.name;
								document.getElementById('vatNumber').value =test.vat_number;
								document.getElementById('city').value =test.city;
								document.getElementById('zipCode').value =test.zip_code;*/
								$scope.merchant = {
									displayValue:test.name,
									value: merchId,
									name:'c.data.merchant'
								}
							}

							// test Existe Mode de Payement 
							var testPay = testExistePay(model);
							if(testPay.sys_id != null ){
								$scope.payment = {
									displayValue:c.data.payName,
									value: c.data.paySysId,
									name:'c.data.payment'
								};
							}
							//Date
							var dd = model.match("([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}");
							if ( dd != null){
								var regex = /[0-9]{1,4}(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}/mg;
								var regex2 = /([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)[0-9]{1,4}(\-|\/|\. |\ )[0-9]{1,4}/mg;
								var s = $scope.getDate(regex,model);
								if(s != undefined){
									if($scope.validateDate(s._i)){
										if(!findDuplicate(dates,s)){
											dates.push(s._i);
										}
									}
									s = $scope.getDate(regex2,model);
									if($scope.validateDate(s._i)){
										if(!findDuplicate(dates,s)){
											dates.push(s._i);
											var r = convert(s);
											document.getElementById('sp_formfield_').value=r;
											$scope.dated = r ;
										}
									}
								}

							}
							var l =model;
							model.toUpperCase();
							//Date
							if(model.indexOf("DATE") != -1){

								l=model.substring(model.indexOf("DATE"),model.indexOf(lastIndexOfDigit(model)));

							}
							//Total
							if(model.indexOf('TO') !=-1)	{	
								l=model.substring(model.indexOf('TO'),model.indexOf(' '));

							}
							if(model.indexOf('TOTAL TTC') !=-1)	{	
								l=model.substring(model.indexOf('TOTAL TTC'),model.indexOf(' '));

							}
							if(model.indexOf('PRIX') !=-1)	{	
								l=model.substring(model.indexOf('PRIX'),model.indexOf(' '));

							}	
							//Test pour rÃ©cuperer Value
							if(JaroWrinker(l.toUpperCase(),'TO') > 0.70  || JaroWrinker(l.toUpperCase(),'PRIX') > 0.70  || JaroWrinker(l.toUpperCase(),'TOTAL TTC') > 0.70)
							{  
								var matches = model.match(/\d{1,3}[,\\.]?(\\d{1,2})?/g).join("");
								var val = parseInt(matches+"" ,10);
								document.getElementById('value').value =val;
								c.data.value=val;
							}
						}

						//c.data.scanFinish = true ;
						c.data.show_progress = false ;
					});
				}
			}});
	};
	$scope.removeFiles = function(fname) {
		var index = $scope.files.indexOf(fname);
		if(index>-1)
			$scope.files.splice(index,1);
	};  
	$scope.scanFiles = function() {
		$scope.files.forEach(function(file){
			var formData = new FormData();

			formData.append('file', file);
			var request = {
				method: 'POST',
				url: 'https://api.ocr.space/parse/image',
				data:formData,
				headers: {
					'Content-Type': undefined,
					'apikey':'616fed4edc88957',
					'scale':true,
					'Accept':'application/json'         
				}
			};

			// SEND THE FILES.
			$http(request)
				.success(function (d) {
				// On success code here


			})
				.error(function (err) {
				// On error code here

			});

		});

	}
	$scope.uploadFiles = function() { 
		$scope.fd = new FormData();
if($scope.files.length == 0){

			var URL = "https://"+c.data.instanceName+".service-now.com/em?id=bills";
		
				window.location.href = URL ;
		}
		else{
			$scope.files.forEach(function(file){
				$scope.fd.set('files', file);
				var request = {
					method: 'POST',
					url: 'https://'+c.data.instanceName+'.service-now.com/api/now/attachment/file?table_name='+c.data.table+'&table_sys_id='+c.data.tableSys+'&file_name='+file.name,
					data: $scope.fd.get('files'),
					headers: {
						'Content-Type': file.type,
						'Accept':'application/json'         
					}
				};

				// SEND THE FILES.
				$http(request)
					.success(function (d) {
					var json_data = JSON.stringify(d);
					json_data = JSON.parse(json_data);
					c.data.action = 'append_image';
					c.data.rec_id = c.data.sysBill;
					c.data.attachment_id = json_data.result.sys_id;
					c.server.update().then(function(){
					var URL = "https://"+c.data.instanceName+".service-now.com/em?id=bills";
		     //window.top.location = URL;
				window.location.href = URL ;
					c.data.action = undefined;

					})
				})
					.error(function (err) {
					// On error code here
				});
			
													 });
		}
		}
	$scope.submit_record=function() {

		c.data.action = 'update';
	c.data.idBill = c.data.sysBill ;
		c.data.billable =$scope.data.billable;
		c.data.reimburse = $scope.data.reimburse;
		c.data.title = $scope.data.title;
		c.data.value=$scope.data.value;
		c.data.tips=$scope.data.tips;
		c.data.processd= $scope.processd; 
		c.data.dated= $scope.dated;
		c.data.state=$scope.data.state;
		c.data.type=$scope.data.type;
		c.data.sheet= $scope.sheet; 
		c.data.payment = $scope.payment;
		c.data.category =$scope.category ;
		c.data.card =$scope.card ;
		c.data.country =$scope.country ;
		c.data.user =  $scope.user ;
		if(c.data.ok == false){
			c.data.merchId = $scope.merchant ; 
			console.log("merch : "+c.data.merchId);
		}
		if(c.data.ok == true ) {
					c.data.merchname = $scope.data.merchname;

		c.data.merchVat = $scope.data.merchVat;

		c.data.merchCity = $scope.data.merchCity;
		c.data.merchZipCode = $scope.data.merchZipCode;
		}

		
		
		c.server.update().then(function(){

			c.data.table = 'x_315710_expense_m_expense_bill';
			c.data.tableSys = c.data.idBill;
			$scope.uploadFiles();

			c.data.action = undefined;
		});

	};

	/********* test merch ******/
	function testExiste(ligne){
		var res = {};
		var number = c.data.merch.length ;
		var i=0 ;
		var ok = false ;
		while(i < number && !ok){
			if(JaroWrinker(ligne.toUpperCase(), c.data.merch[i].name) > 0.80) {
				res = c.data.merch[i];
				/*c.data.merchname = res.name ;
				c.data.merchCity = res.city ;
				c.data.merchZipCode = res.zip_code;
				c.data.merchVat = res.vat_number;
*/
				ok=true;

			}
			else
				i++;
		}
		return res ;
	}

	/********* test PAyment ******/

	function testExistePay(lignee){
		var resPay = {};
		var number = c.data.payList.length ;
		var i=0 ;
		var ok = false ;
		while(i < number && !ok){
			var name = c.data.payList[i].name ;
			var res = parseFloat(""+JaroWrinker(lignee.toUpperCase(),name.toUpperCase())).toFixed(1);
			if(res >= 0.7) {
				resPay = c.data.payList[i];
				ok=true;
			}
			i++;
		}
		return resPay ;
	}


	//Test de Date 
	$scope.getDate=function(regex,str){
		var m;
		var d;
		var flag=false;
		while ((m = regex.exec(str)) !== null) {
			// This is necessary to avoid infinite loops with zero-width matches
			if (m.index === regex.lastIndex) {
				regex.lastIndex++;
			} // The result can be accessed through the `m`-variable.

			var list = [
				'M/d/yyyy',
				'M/d/yy',
				'M/dd/yy',
				'MM/dd/yy',
				'MM/dd/yy',
				'MM/dd/yyyy',
				'yy/MM/dd',
				'L',
				'LL',
				'l',
				'll',
				'yyyy-MM-dd',
				'dd-MMM-yy',
				'DD-MM-YYYY'
			];
			d = moment(m[0], list) ;
			if(d.isValid() )
			{ 
				flag=true;
			}
		}
		if(flag)
			return d;
	}

	findDuplicate = function(tab,obj){
		tab.forEach(function(item){
			var b= item+'' == obj+'';
			if(b)
				return true;
		});
		return false;
	}
	$scope.validateDate= function(str){
		if(str.split('-').length==3|
			 str.split(' ').length==3|
			 str.split('.').length==3|
			 str.split('/').length==3)
			return true;
		else
			return false;
	}
	function convert(str) {
		var date = new Date(str),
				mnth = ("0" + (date.getMonth()+1)).slice(-2),
				day  = ("0" + date.getDate()).slice(-2);
		return [ date.getFullYear(), mnth, day ].join("-");
	}

	function lastIndexOfDigit(str) {
		var last_indices = [];
		[1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (digit) {
			last_indices.push(str.lastIndexOf(digit));
		});
		var indices = last_indices.sort(function (a, b) {
			return a - b;
		});
		return indices[indices.length - 1];
	}
	//Function of Similarity
	function JaroWrinker (s1, s2) {
		var m = 0;
		// Exit early if either are empty.
		if ( s1.length === 0 || s2.length === 0 ) {
			return 0;
		}
		// Exit early if they're an exact match.
		if ( s1 === s2 ) {
			return 1;
		}
		var range     = (Math.floor(Math.max(s1.length, s2.length) / 2)) - 1,
				s1Matches = new Array(s1.length),
				s2Matches = new Array(s2.length);
		for ( i = 0; i < s1.length; i++ ) {
			var low  = (i >= range) ? i - range : 0,
					high = (i + range <= s2.length) ? (i + range) : (s2.length - 1);
			for ( j = low; j <= high; j++ ) {
				if ( s1Matches[i] !== true && s2Matches[j] !== true && s1[i] === s2[j] ) {
					++m;
					s1Matches[i] = s2Matches[j] = true;
					break;
				}
			}
		}
		// Exit early if no matches were found.
		if ( m === 0 ) {
			return 0;
		}
		// Count the transpositions.
		var k = 0 ;
		var n_trans = 0;
		for ( i = 0; i < s1.length; i++ ) {
			if ( s1Matches[i] === true ) {
				for ( j = k; j < s2.length; j++ ) {
					if ( s2Matches[j] === true ) {
						k = j + 1;
						break;
					}
				}
				if ( s1[i] !== s2[j] ) {
					++n_trans;
				}
			}
		}
		var weight = (m / s1.length + m / s2.length + (m - (n_trans / 2)) / m) / 3,
				l      = 0,
				p      = 0.1;

		if ( weight > 0.7 ) {
			while ( s1[l] === s2[l] && l < 4 ) {
				++l;
			}
			weight = weight + l * p * (1 - weight);
		}

		return weight;
	} 
	//Convertion PDF Array

	function pdfAsArray(pdfAsArray) {
		var l = pdfjsLib.getDocument(pdfAsArray);
		l.promise.then(function (pdf) {
			var pdfDocument = pdf;
			// Create an array that will contain our promises
			var pagesPromises = [];
			for (var i = 1; i <= pdf.numPages; i++) {
				// Required to prevent that i is always the total of pages
				// Store the promise of getPageText that returns the text of a page
				pagesPromises.push(getPageText(i, pdfDocument));


			}
			// Execute all the promises
			Promise.all(pagesPromises).then(function (pagesText) {
				//var tab= new RegExp('[\r\n]');
				// e.g ["Text content page 1", "Text content page 2", "Text content page 3" ... ]
				var txt ; 
				pagesText.forEach(function(item){
					txt = item.split('  ');

				}); 
				txt.splice(0,' ');
				for ( var i = 0 ; i< txt.length ; i++){
					var m = txt[i].split(' ');

					var l ;
					txt[i].toUpperCase();
					/************************ TOTAL ************************/
					var ch = 'TOTAL';
					if(txt[i].indexOf(ch) !=-1)	{	
						l=txt[i].substring(txt[i].indexOf(ch),txt[i].indexOf(ch)+ch.length+50) ;
					}
					var ch2 = "PRIX";
					if(txt[i].indexOf(ch2) !=-1)	{	
						l=txt[i].substring(txt[i].indexOf(ch2),txt[i].indexOf(ch2)+ch2.length+50) ;
					}	
					var ch3 = "TOTAL TTC";
					if(txt[i].indexOf(ch3) !=-1)	{	
						l=txt[i].substring(txt[i].indexOf(ch3),txt[i].indexOf(ch3)+ch3.length+50) ;
					}	

					//Test pour rÃ©cuperer Value
					if(JaroWrinker(txt[i].toUpperCase(),'TOTAL') > 0.70  || JaroWrinker(txt[i].toUpperCase(),'PRIX') > 0.70  || JaroWrinker(txt[i].toUpperCase(),'TOTAL TTC') > 0.70){  
						var matches = l.match(/\d{1,3}[,\\.]?(\\d{1,2})?/g).join("");

						var val = parseInt(matches+"" ,10);

						document.getElementById('value').value =val;
						c.data.value = val ; 
						/***************************TVA*********************************/
						var tva = "TVA";
						var t ;
						if(txt[i].indexOf(tva) !=-1)	{	
							t=txt[i].substring(txt[i].indexOf(tva),txt[i].indexOf(tva)+tva.length+4) ;
							var matches = t.match(/\d{1,3}[,\\.]?(\\d{1,2})?/g).join("");
							var val = parseInt(matches+"",10);
							document.getElementById('vat').value =val;
							c.data.value= val ;
						}	

					}
					/************************ Mode de PAyment  ************************/
					var testPay = testExistePay(txt[i]);
					if(testPay.sys_id != null ){
						//$('#payment').select2('val',testPay.sys_id );
							$scope.payment = {
									displayValue:c.data.payName,
									value: c.data.paySysId,
									name:'c.data.payment'
								};

					}
					/************************ Merchant ************************/
					var test = testExiste(txt[i]);
					if (test.name != null ){
						merchId = test.sys_id ; 
							$scope.merchant = {
									displayValue:test.name,
									value: merchId,
									name:'c.data.merchant'
								}
					}
					/************************ Date  ************************/
					var rech = "Emise le";
					var pos = txt[i].indexOf(rech); //+rech.length
					var o = txt[i].substring(pos,pos+rech.length+11) ;
					var ddd = o.match("[0-9]{2}([\-\/\ \.])[0-9]{2}[\-\/\ \.][0-9]{4}");
					if ( ddd != null){
						var date = ddd[0].split('/');
						var m = moment(ddd[0]).format("YYYY-MM-DD");
						document.getElementById('sp_formfield_').value=m;
						$scope.dated = m ;
					}
					else{
						var dates=[];
						var dd = txt[i].match("([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}");
						if ( dd != null){
							var regex = /[0-9]{1,4}(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}/mg;
							var regex2 = /([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)[0-9]{1,4}(\-|\/|\. |\ )[0-9]{1,4}/mg;
							var s = $scope.getDate(regex,txt[i]);
							if(s != undefined){
								if($scope.validateDate(s._i)){
									if(!findDuplicate(dates,s)){
										dates.push(s._i);
									}
								}
								s = $scope.getDate(regex2,txt[i]);
								if($scope.validateDate(s._i)){
									if(!findDuplicate(dates,s)){
										dates.push(s._i);
										var r = convert(s);
										document.getElementById('sp_formfield_c.data.dated').value=r;
										$scope.dated = m ;
									}
								}
							}

						}

						//Date
						if(txt[i].indexOf("DATE") != -1 ){
							l=model.substring(txt[i].indexOf("DATE"),txt[i].indexOf(lastIndexOfDigit(txt[i])));

						}
					}

				}
			});

		}, function (reason) {

		});
	}

	//Convertion To Binary
	function convertDataURIToBinary(dataURI) {
		var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
		var base64 = dataURI.substring(base64Index);
		var raw = window.atob(base64);
		var rawLength = raw.length;
		var array = new Uint8Array(new ArrayBuffer(rawLength));
		for (var i = 0; i < rawLength; i++) {
			array[i] = raw.charCodeAt(i);
		}
		pdfAsArray(array);
	}

	// Return Text Of Page
	function getPageText(pageNum, PDFDocumentInstance) {
		// Return a Promise that is solved once the text of the page is retrieven
		return new Promise(function (resolve, reject) {
			PDFDocumentInstance.getPage(pageNum).then(function (pdfPage) {
				// The main trick to obtain the text of the PDF page, use the getTextContent method
				pdfPage.getTextContent().then(function (textContent) {

					var textItems = textContent.items;
					var finalString = "";
					// Concatenate the string of the item to the final string
					for (var i = 0; i < textItems.length; i++) {
						var item = textItems[i];
						finalString += item.str + " ";
					}
					// Solve promise with the text retrieven from the page
					resolve(finalString);
				});
			});
		});
	}

	//Compare
	function compare_n_save(pdfArrayOfObject) {
		var arr3 = pdfArrayOfObject;
		datass.push(arr3);

	}


}


]]></client_script>
        <controller_as>c</controller_as>
        <css>
.fixed {
  position: fixed;

}

.input-group {
  display: table;
  white-space: nowrap;
  vertical-align: top;
  width: 100%;
}
.input-group .form-control {
  display: table-cell;
  vertical-align: top;
  width: 100%;
}
.input-group .input-group-addon {
  display: table-cell;
  width: 1%;
  vertical-align: top;
  /* background: #2f353e;*/
  color: #686666;
  font-size: 1.15rem;
  line-height: 19px;
  padding-left: 10px;
  padding-right: 10px;
}

</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>widget_update_bill</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>widget update bill</name>
        <option_schema>[{"name":"sys_id","section":"other","label":"sys_id","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

var usertab =  new GlideRecord('sys_user');
	data.table ='x_315710_expense_m_expense_bill';
	var merch = new GlideRecord("x_315710_expense_m_merchant");
	data.instanceName = gs.getProperty('instance_name');
	var gr = new GlideRecord(data.table);
	var categ = new GlideRecord("x_315710_expense_m_category");
	var count = new GlideRecord("core_country");
	var sheet = new GlideRecord("x_315710_expense_m_expense_sheet");
	var p = new GlideRecord('x_315710_expense_m_payment_instrument');
	var card = new GlideRecord("x_315710_expense_m_rate");



	gr.get(input.sys_id);


	data.sysBill =input.sys_id ;  
	gs.warn("remplir formulaire : "+data.sysBill);
	data.title=gr.getDisplayValue("title");

	gs.warn('script called on start '+gr.sys_id);
	//data.sysBill = gr.sys_id;

	/*bill*/
	data.value=parseFloat(gr.getValue('value'));
	gs.warn("Value : "+data.value);
	data.vat = parseInt(gr.getValue("vat")) ;
	data.tips = parseFloat(gr.getValue("tips")) ;
	data.dated = gr.getDisplayValue("date");
	data.image = gr.getDisplayValue("image");
//	data.user = gr.getDisplayValue("user") ;
	data.state = gr.getDisplayValue("state_bill") ;
	//data.sheet={"sys_id":gr.getValue("expense_sheet"),"display_value":gr.getDisplayValue("expense_sheet")};

		/* Payment */
data.user = gr.getValue("user") ;
	usertab.get(data.user);
	data.userName = usertab.getValue("name");
	data.userId=usertab.getValue("sys_id");
	
	/* Sheet */
	data.sheet = gr.getValue("expense_sheet") ;
	sheet.get(data.sheet);
	data.sheetName = sheet.getValue("name");
	data.sheetId=sheet.getValue("sys_id");
	/*Payment*/
	data.payment = gr.getValue("payment_instrument") ;
	p.get(data.payment);
	data.paymentName = p.getValue("name");

	/*Country*/
	data.country = gr.getValue("country") ;
	count.get(data.country);
	data.countryName = count.getDisplayValue("name");
	/*Category*/
	data.category = gr.getValue("category") ;
	categ.get(data.category);
	data.categoryName = categ.getDisplayValue("name");
	/*Card*/
	data.card = gr.getValue("rate_card") ;
	card.get(data.card);
	data.cardName = card.getValue("name");

	data.country = gr.getValue("country") ;
	data.reimburse =gr.getValue("to_reimburse") ;
	data.billable = gr.getValue("billable_to_client") ;
	data.type=gr.getDisplayValue("type_bill");
	data.processd=gr.getDisplayValue("process_date");

	var idMerch = gr.getValue("merchant");
	if(idMerch != null){
		merch.get("sys_id",idMerch);
	//	data.merchZipCode = merch.getDisplayValue("zip_code") ;
data.merchId = idMerch ;
		/*data.merchCity = merch.getDisplayValue("city") ;
		data.merchVat = merch.getDisplayValue("vat_number") ;
	*/	data.merchnamee = merch.getDisplayValue("name") ;
		gs.warn ("merchant : "+merch.name+" , "+merch.city+" , "+merch.vat_number+" , "+merch.zip_code);
	}

	/** Get uSer Connecter **/
	var user = gs.getUserID();

	gs.warn("user sys_id: " + user.street+" , "+user.city);
	var myUserObject = gs.getUser() ;
	gs.warn(myUserObject.getFirstName()); //print the first name of the user you are currently logged in as 

	data.userCon = user  ;
	data.userConName = myUserObject.name ;
	gs.warn("incident.commented "+ gs.getUserID()+" " +gs.getUserName())
	gs.warn("idUser : "+data.userCon);
	gs.warn("NameUser : "+data.userConName);


	data.merch=[];

	merch.query();
	while(merch.next()){
		merchobj={};
		$sp.getRecordValues(merchobj,merch,"sys_id,name,city,vat_number,zip_code")
		data.merch.push(merchobj);
	}

	/****** Liste des payment *****/
	data.payList=[];


	p.query();
	while(p.next()){
		payObj={};
		$sp.getRecordValues(payObj,p,"name,sys_id");
		data.payList.push(payObj);
	}


	gs.warn('script called  input : '+data.sysBill);
	
	if(input && input.action=='update'){
var grr = new GlideRecord(data.table);
		gs.warn('script called  data : '+data.sysBill);
		gs.warn("Update ***********");
		//gs.warn("eee "+gr.sys_id);
		/*Recuperer Merchant*/
		gs.warn("title : "+data.title);
		data.merchZipCode = input.merchZipCode ;
		data.merchCity = input.merchCity ;
		data.merchVat = input.merchVat ;
		data.merchName = input.merchname ;
		gs.warn ("merchant : "+data.merchName+" , "+data.merchCity+" , "+data.merchVat+" , "+data.merchZipCode);

		//var gr = new GlideRecord(data.table);
		gs.warn('insert started');   
		var idM  ;
		gs.warn("ook = "+input.ok);
		if(input.ok == false){
			gr.merchant = input.merchId.value;
			gs.warn("id from liste = "+input.merchId.value);
		}
		else if(input.ok == true){
	
		gs.warn("name merchant : "+input.merchname);
		data.merchZipCode = input.merchZipCode ;
		data.merchCity = input.merchCity ;
		data.merchVat = input.merchVat ;
		data.merchName = input.merchname ;
		gs.warn ("merchant : "+data.merchName+" , "+data.merchCity+" , "+data.merchVat+" , "+data.merchZipCode);
		merch.vat_number = data.merchVat ;
					merch.name = data.merchName ; 
					merch.city = data.merchCity ; 
					merch.zip_code = data.merchZipCode ;
			merch.vat_number = data.merchVat;
				idM =merch.insert();
					gr.merchant =idM ;
					gs.warn("new merchant !!!!"+idM);
	}
data.idBill = input.idBill ;
			grr.get(data.idBill) ; 
		gs.warn("updateeeeeee "+data.idBill);
				gs.warn(JSON.stringify(grr));
				grr.title = input.title;
				grr.value = input.value; 
				grr.state_bill = input.state;
				grr.process_date = input.processd;
				grr.date=input.dated;
				grr.type_bill=input.type;
				grr.tips=input.tips;
				grr.expense_sheet=input.sheet.value;
				grr.payment_instrument=input.payment.value;
				grr.category = input.category.value ;
			
				grr.country = input.country.value ;
				grr.user = input.user.value;
				grr.billable_to_client = input.billable;
				grr.to_reimburse= input.reimburse;
				grr.vat = input.vat ;


			grr.update();
			gs.warn("updated");
				gs.warn(JSON.stringify(grr));
		


	
	}
	

	if(input && input.action=='append_image'){
		gs.warn('append started by attach : '+input.attachment_id+' and id is : '+input.rec_id);
		if(input.rec_id && input.attachment_id){

			var r = new GlideRecord(data.table);
			r.get(input.rec_id);
			r.image = input.attachment_id;
			var ress = r.update();
			gs.warn('saved  : '+ress);
			gs.addInfoMessage("Success");
		}
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-06-19 07:43:17</sys_created_on>
        <sys_id>1734b3fe1b4e330072fe2136ec4bcbec</sys_id>
        <sys_mod_count>879</sys_mod_count>
        <sys_name>widget update bill</sys_name>
        <sys_package display_value="Expense Management" source="x_315710_expense_m">ea3c9ce91b0cfb0072fe2136ec4bcb50</sys_package>
        <sys_policy/>
        <sys_scope display_value="Expense Management">ea3c9ce91b0cfb0072fe2136ec4bcb50</sys_scope>
        <sys_update_name>sp_widget_1734b3fe1b4e330072fe2136ec4bcbec</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-11-07 16:59:20</sys_updated_on>
        <template><![CDATA[<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.8/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.8/js/select2.min.js"></script>

<!-- CDN PDFJS -->
 <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.2.2/pdf.js"></script>
<!-- fin-->



<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>

<script src='https://cdn.jsdelivr.net/gh/naptha/tesseract.js@v1.0.14/dist/tesseract.min.js'></script> 
<form class="form-horizontal">
 
     <div class="col s12 m6 l10">
                <h6 class="card-title">Update Expense Bill {{c.data.updateName}}</h6>
    <hr  size="1" color="blue">
     </div>
                  
                    <div class="form-group">

                        <label class="col-md-3 control-label">Image</label>
                        <div class="col-md-4">

                            <img style="width:320px;height:320px" ng-src="{{::data.image}}" />
                            <br>
                            <br>

                            <label class="btn btn-info btn-sm">
                                <span>
                                    <i class="glyphicon glyphicon-paperclip" aria-hidden="true"></i>
                                    <b>Choose file</b>
                                </span>
                                <input style='opacity:0; width:0px; height:0px;' type="file" id="fileToUpload"  onchange="angular.element(this).scope().setFiles(this)"
                                />
                            </label>
                            <br/>
                            <div ng-show="files.length">
                                <div ng-repeat="file in files.slice(0)">
                                    <span>New : {{file.webkitRelativePath || file.name}}</span>
                                    <span ng-switch="file.size > 1024*1024">
                                        <span ng-switch-when="true">{{file.size / 1024 / 1024 | number:2}} MB</span>
                                        <span ng-switch-default>{{file.size / 1024 | number:2}} kB</span>
                                    </span>
                                    <span class="glyphicon glyphicon-remove-circle" id="removeicon" ng-click="removeFiles(file)"></span>
                                </div>
                            </div>

                        </div>
                    </div>
                  
                                  <!-- Start  Load Image -->
      <div class="form-group">
        <label class="col-md-3 control-label" ></label>
        <div class="col-md-4">
          <div ng-class="{true:'progress',false:''}[c.data.show_progress]" >
          <div class="indeterminate"></div>
        </div>
       
        </div></div>
        <!-- End Load Image -->

									   <div class="form-group">
										  <label class="col-md-3 control-label" >Expense Sheet</label>
										  <div class="col-md-4">
											<sn-record-picker field="sheet"
											   table="'x_315710_expense_m_expense_sheet'" 
											   display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
												page-size="100"   ></sn-record-picker>
												 </div>
									   </div>

									  <div class="form-group">
										  <label class="col-md-3 control-label" >Category</label>
										  <div class="col-md-4">
											<sn-record-picker field="category"
											   table="'x_315710_expense_m_category'" 
											   display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
												page-size="100"  ></sn-record-picker>
												</div>
									   </div>
  
  <div class="form-group">
          <label class="col-md-3 control-label" >Merchant </label>
          <div class="col-md-4">
            <sn-record-picker field="merchant"
                              table="'x_315710_expense_m_merchant'" 
                              display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
                              page-size="100" on-change="getFields()" ></sn-record-picker>
           
          </div>
     <div class="col-md-1">
        <a class="btn btn-floating btn-small btn-info  gradient-shadow " ng-click="addMerchant()"><i class="material-icons">add</i></a>
     </div>
        </div> 
  
  
               
										<div class="form-group">
										  <label class="col-md-3 control-label" >Title</label>
										  <div class="col-md-4">
											<input id="Title" type="text" placeholder="" class="form-control" name="title" ng-model="c.data.title" />
										  </div>
									   </div>

                           
										 <div class="form-group">
											<label class="col-md-3 control-label" >Value</label>
											<div class="col-md-4">
											  <input id="value" type="number" class="form-control" name="value"  ng-model="c.data.value" />
											</div>
										 </div>
                
                   
									   <div class="form-group">

											  <label class="col-md-3 control-label" >VAT</label>

											 <div class="col-md-4">
												<div class="input-group">
												<input min="0" max="100" id="vat" type="number" class="form-control" name="vat"  ng-model="c.data.vat" />
												<label class="input-group-addon" for="number">%</label> 
										   </div>
										 </div>
										</div>
                         
										<div class="form-group">
										  <label class="col-md-3 control-label" >Tip(s)</label>
										  <div class="col-md-4">
											<input id="tips" type="number" class="form-control" name="tips" ng-model="c.data.tips" />
										  </div>
									   </div>
										<div class="form-group">
											  <label class="col-md-3 control-label" >Payment Instrument</label>
											  <div class="col-md-4">
										<sn-record-picker field="payment"
										   table="'x_315710_expense_m_payment_instrument'" 
										   display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
											page-size="100"  default-query="c.assigned_to_query" ></sn-record-picker>
										  </div>
										   </div>
                  
										   <div class="form-group">
											  <label class="col-md-3 control-label" >Date</label>
											  <div class="col-md-4">
										 <sp-date-picker field="dated" sn-change="" ng-model="c.data.dated"  id='date' ></sp-date-picker>
											 </div>
											</div>

										 <div class="form-group">
										  <label class="col-md-3 control-label" >Date Process</label>
										  <div class="col-md-4">
													<sp-date-picker  field="processd" ng-model="c.data.processd" ></sp-date-picker>
										   </div>
										</div>
										 <div class="form-group">
										  <label class="col-md-3 control-label" >User</label>
										  <div class="col-md-4">
											<div ng-if="c.data.userConName == 'admin'">
											  <sn-record-picker field="user" table="'sys_user'" 
											 display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
											   page-size="100"  ></sn-record-picker>
											</div>
											<div ng-if="c.data.userConName != 'admin'">
											  <sn-record-picker sn-disabled="c.data.userConName" field="c.data.user" table="'sys_user'" 
											 display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
											   page-size="100"  ></sn-record-picker>
											</div>
									  </div>
									   </div>

										

										 <div class="form-group">
										  <label class="col-md-3 control-label" >Country</label>
										  <div class="col-md-4">
									<sn-record-picker field="country"
									   table="'core_country'" 
									   display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
										page-size="100"  ></sn-record-picker>
									  </div>
									   </div>

										<div class="form-group">
                      <div class="col-md-3 control-label" ></div>
									  <label>
										<input  type="checkbox" ng-model="data.reimburse" class="filled-in" id="reimburse" value="r"   ng-checked="data.reimburse == true"  />
									<span>To Reimburse</span>
                      </label>
								   </div>
								<div class="form-group">
                    <div class="col-md-3 control-label" ></div>
                   <label>
                <input type="checkbox" ng-model="data.billable" ng-checked="data.billable == true " class="filled-in"  id="billable" value="b"   />
                <span>Billable to client</span>
              </label>
                  </div>
								  
									 

									   <div class="form-group">
										  <label class="col-md-3 control-label" >Type</label>
										  <div class="col-md-4">
											<select class="form-control" name="type" id="type" ng-model="c.data.type">
												<option value="">---Please select---</option> <!-- not selected / blank option -->
												<option value="Capex">Capex</option> 
												<option value="Opex">Opex</option>
											</select>
										  </div>
									   </div>

										<div class="form-group">
											  <label class="col-md-3 control-label" >State</label>
											  <div class="col-md-4">
												<select class="form-control" name="state" id="state" ng-model="c.data.state">
													<option value="">---Please select---</option> <!-- not selected / blank option -->
													<option value="Pending">Pending</option> 
													<option value="Processed">Processed</option>
												</select>
											  </div>
										   </div>
                   
                 

  
     <div ng-show="c.data.ok == true">
  
       <div class="col s12 m6 l10">
                <h6 >Merchant</h6>
         <hr size=2>
     </div>
        
        <div class="form-group">
          <label class="col-md-3 control-label" >Name</label>
          <div class="col-md-4">
            <input id="merchName" type="text" placeholder="" class="form-control" name="n" ng-model="data.merchname"  />
          </div>
        </div>
        <div class="form-group">
          <label class="col-md-3 control-label" >Vat Number</label>
          <div class="col-md-4">
            <input id="vatNumber" type="text" placeholder="" class="form-control" name="v" ng-model="data.merchVat"  />
          </div>
        </div>
        <div class="form-group">
          <label class="col-md-3 control-label" >City</label>
          <div class="col-md-4">
            <input id="city" type="text" placeholder="" class="form-control" name="c" ng-model="data.merchCity"/>
          </div>
        </div>
        <div class="form-group">
          <label class="col-md-3 control-label" >Zip Code</label>
          <div class="col-md-4">
            <input id="zipCode" type="text" placeholder="" class="form-control" name="z" ng-model="data.merchZipCode" />
          </div>
        </div>

  </div>

    <button  class="btn waves-effect waves-light " ng-click="submit_record()" type="submit" name="action">Send<i class="material-icons right">send</i>
  </button>

</form>]]></template>
    </sp_widget>
</record_update>
