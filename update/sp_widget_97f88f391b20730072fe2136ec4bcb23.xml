<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope,$http , $rootScope) {	
	var c = this;
$scope.testComplete = function(){
	var ok = true ; 
	if(c.data.title == null || $scope.sheet == null || $scope.dated == null){
		ok = false ; 
		console.log("ok : "+ok);
	}
	else{
		ok = true ; 
		console.log("ok : "+ok);
	}
	return ok ;
}
	//Id de marchant qui recuperer depuit la fonction testExiste
	var merchId ; 
	var BASE64_MARKER = ';base64,';
	$scope.files = []; 
	/*****User*****/
	$scope.user = {
		displayValue:c.data.userConName,
		value:c.data.userCon 
	};
	$scope.sheet = {
		displayValue:'',
		value:'',
		name:'c.data.sheet'
	};
		$scope.payment = {
		displayValue:'',
		value:'',
		name:'c.data.payment'
	};
			$scope.card = {
		displayValue:'',
		value:'',
		name:'c.data.card'
	};
			$scope.country = {
		displayValue:'',
		value:'',
		name:'c.data.country'
	};
	console.log("category : "+c.data.categSysId+" , "+c.data.categName);
			$scope.category = {
		displayValue:c.data.categName,
		value: c.data.categSysId,
		name:'c.data.category'
	};

	$scope.dated = {
		displayValue: '',
		value: '',
		name:'dated'
	};
	console.log("date "+$scope.dated);
									
	$scope.processd = {
		displayValue:new Date().toString(),
		value: new Date().toString(),
		name:'processd'
	};	

	c.action = function(action) {
		c.data.action = action;

		c.server.update().then(function() {
			c.data.action = undefined;
		})
	}
	//Traitement D'image 
	$scope.setFiles = function(element) {
		$scope.$apply(function() {
			var dates=[];
			for (var i = 0; i < element.files.length; i++) {
				var type = element.files[i].type;
				$scope.files.push(element.files[i]);
				var datass = []; 
				pdfjsLib.GlobalWorkerOptions.workerSrc='https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.2.2/pdf.worker.js';   
				if( type  == 'application/pdf')
				{
					var input =element.files[i];
					var fReader = new FileReader();
					fReader.readAsDataURL(input);
					console.log(input);
					fReader.onloadend = function (event) {
						convertDataURIToBinary(event.target.result);
					}
				}
				if (type == 'image/jpeg'){
					//Tesseract : SCan Image
					Tesseract.recognize(element.files[i])
						.then(function(result){
						console.log(result.lines);
						//Parcour line result
						for(var i=0 ; i<result.lines.length;i++){	
							var model = result.lines[i].text ;
							//Merchant
							var test = testExiste(model);
							if (test.name != null){
								merchId = test.sys_id ; 
								document.getElementById('merchName').value =test.name;
								document.getElementById('vatNumber').value =test.vat_number;
								document.getElementById('city').value =test.city;
								document.getElementById('zipCode').value =test.zip_code;
							}
							// test Existe Mode de Payement 
							var testPay = testExistePay(model);
							if(testPay.sys_id != null ){
								console.log("txt de i : "+model);
								console.log("mode de payment : "+testPay);
									$('#payment').select2('val',testPay.sys_id );
								/*c.data.payment = { 
									displayValue:testPay.name,
									value:testPay.sys_id 
								}*/
							}
							//Date
							var dd = model.match("([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}");
							if ( dd != null){
								var regex = /[0-9]{1,4}(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}/mg;
								var regex2 = /([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)[0-9]{1,4}(\-|\/|\. |\ )[0-9]{1,4}/mg;
								var s = $scope.getDate(regex,model);
								console.log('res'+s);
								if(s != undefined){
									if($scope.validateDate(s._i)){
										if(!findDuplicate(dates,s)){
											dates.push(s._i);
											console.log('date found : '+s.toString());
										}
									}
									s = $scope.getDate(regex2,model);
									if($scope.validateDate(s._i)){
										if(!findDuplicate(dates,s)){
											dates.push(s._i);
											console.log('date found 2 : '+s.toString());
											//var dd = new Date(s._i) ;
											var r = convert(s);
											console.log("rrrrrrrrr" + r);
											document.getElementById('sp_formfield_').value=r;
											$scope.dated = r ;
										}
									}
								}

							}
							var l =model;
							model.toUpperCase();
							//Date
							if(model.indexOf("DATE") != -1){
								console.log(model);
								console.log("indexOf Date :"+model.indexOf(" "));
								l=model.substring(model.indexOf("DATE"),model.indexOf(lastIndexOfDigit(model)));
								console.log("********** la date : "+l);
							}
							//Total
							if(model.indexOf('TO') !=-1)	{	
								console.log("indexOf : "+model.indexOf('TO'));
								l=model.substring(model.indexOf('TO'),model.indexOf(' '));
								console.log("chaine : "+l);
							}
							if(model.indexOf('PRIX') !=-1)	{	
								l=model.substring(model.indexOf('PRIX'),model.indexOf(' '));
								console.log("chaine : "+l);
							}	
							//Test pour rÃ©cuperer Value
							if(JaroWrinker(l.toUpperCase(),'TO') > 0.70  || JaroWrinker(l.toUpperCase(),'PRIX') > 0.70)
							{  
								var matches = model.match(/\d{1,3}[,\\.]?(\\d{1,2})?/g).join("");
								console.log(matches);
								var val = parseInt(matches+"" ,10);
								document.getElementById('value').value =val;
								c.data.value=val;
							}
						}

						console.log(dates);
					});
				}}});
	};
	$scope.removeFiles = function(fname) {
		var index = $scope.files.indexOf(fname);
		if(index>-1)
			$scope.files.splice(index,1);
	};  
	$scope.scanFiles = function() {
		$scope.files.forEach(function(file){
			var formData = new FormData();

			formData.append('file', file);
			var request = {
				method: 'POST',
				url: 'https://api.ocr.space/parse/image',
				data:formData,
				headers: {
					'Content-Type': undefined,
					'apikey':'616fed4edc88957',
					'scale':true,
					'Accept':'application/json'         
				}
			};
			console.log('HTTP request : '+request);

			// SEND THE FILES.
			$http(request)
				.success(function (d) {
				// On success code here
				console.log('response :',d.ParsedResults[0]);

			})
				.error(function (err) {
				// On error code here
				console.log('error :',err);
			});

		});

	}
	$scope.uploadFiles = function() { 
		$scope.fd = new FormData();
if( $scope.files.length == 0){
	var URL = "https://"+c.data.instanceName+".service-now.com/em?id=bills";
					console.log("URL : "+URL) ; 
		     //window.top.location = URL;
				window.location.href = URL ;
}
		else{
		$scope.files.forEach(function(file){
			$scope.fd.set('files', file);
			var request = {
				method: 'POST',
				url: 'https://'+c.data.instanceName+'.service-now.com/api/now/attachment/file?table_name='+c.data.table+'&table_sys_id='+c.data.tableSys+'&file_name='+file.name,
				data: $scope.fd.get('files'),
				headers: {
					'Content-Type': file.type,
					'Accept':'application/json'         
				}
			};
			console.log('HTTP request:',request);

			// SEND THE FILES.
			$http(request)
				.success(function (d) {
				var json_data = JSON.stringify(d);
				json_data = JSON.parse(json_data);
				c.data.action = 'append_image';
				c.data.rec_id = c.data.id;
				c.data.attachment_id = json_data.result.sys_id;
				c.server.update().then(function(){
				//	$rootScope.ok = "ok";
				//	$rootScope.$emit('listB', "ok");
					var URL = "https://"+c.data.instanceName+".service-now.com/em?id=bills";
					console.log("URL : "+URL) ; 
		     //window.top.location = URL;
				window.location.href = URL ;
					c.data.action = undefined;
				})
			})
				.error(function (err) {
				// On error code here
			});

		});
		}

	}
	$scope.submit_record=function() {
		console.log('started submit');

		c.data.action = 'insert';

		c.data.billable =$scope.data.billable;
		c.data.reimburse = $scope.data.reimburse;
		c.data.title = $scope.data.title;
		c.data.value=$scope.data.value;
		c.data.tips=$scope.data.tips;
		c.data.processd= $scope.processd; 
		c.data.dated= $scope.dated;
		c.data.state=$scope.data.state;
		c.data.type=$scope.data.type;
		//$('#sheet').select2('val');//
		c.data.sheet= $scope.sheet; 
		c.data.payment = $scope.payment;
		c.data.category =$scope.category ;
		c.data.card =$scope.card ;
		c.data.country =$scope.country ;
		c.data.user =  $scope.user ;
		c.data.merchId = merchId ; 
		console.log("info : "+c.data.user+" , "+c.data.sheet);

		c.data.merchname = $scope.data.merchname;
		console.log("salma test  : "+  $scope.data.merchId);

		c.data.merchVat = $scope.data.merchVat;

		c.data.merchCity = $scope.data.merchCity;
		c.data.merchZipCode = $scope.data.merchZipCode;
		c.server.update().then(function(){

			c.data.table = 'x_315710_expense_m_expense_bill';
			c.data.tableSys = c.data.id;
			console.log('id : '+c.data.id);
			console.log('tbl : '+c.data.table);
			$scope.uploadFiles();

			c.data.action = undefined;
		});

	};

	/********* test merch ******/
	function testExiste(ligne){
		var res = {};
		var number = c.data.merch.length ;
		var i=0 ;
		var ok = false ;
		while(i < number && !ok){
			if(JaroWrinker(ligne.toUpperCase(), c.data.merch[i].name) > 0.80) {
				res = c.data.merch[i];
				c.data.merchname = res.name ;
				c.data.merchCity = res.city ;
				c.data.merchZipCode = res.zip_code;
				c.data.merchVat = res.vat_number;

				ok=true;

			}
			else
				i++;
		}
		return res ;
	}

	/********* test PAyment ******/

	function testExistePay(lignee){
		var resPay = {};
		var number = c.data.payList.length ;
		var i=0 ;
		var ok = false ;
		while(i < number && !ok){
			var name = c.data.payList[i].name ;
			var res = parseFloat(""+JaroWrinker(lignee.toUpperCase(),name.toUpperCase())).toFixed(1);
			if(res >= 0.7) {
				resPay = c.data.payList[i];
				ok=true;
			}
			i++;
		}
		return resPay ;
	}


	//Test de Date 
	$scope.getDate=function(regex,str){
		var m;
		var d;
		var flag=false;
		while ((m = regex.exec(str)) !== null) {
			// This is necessary to avoid infinite loops with zero-width matches
			if (m.index === regex.lastIndex) {
				regex.lastIndex++;
			} // The result can be accessed through the `m`-variable.

			var list = [
				'M/d/yyyy',
				'M/d/yy',
				'M/dd/yy',
				'MM/dd/yy',
				'MM/dd/yy',
				'MM/dd/yyyy',
				'yy/MM/dd',
				'L',
				'LL',
				'l',
				'll',
				'yyyy-MM-dd',
				'dd-MMM-yy',
				'DD-MM-YYYY'
			];
			d = moment(m[0], list) ;
			if(d.isValid() )
			{ 
				console.log(d._i);
				flag=true;
			}
		}
		if(flag)
			return d;
	}

	findDuplicate = function(tab,obj){
		tab.forEach(function(item){
			var b= item+'' == obj+'';
			console.log( typeof obj+' testin '+typeof item+"  are "+b );
			if(b)
				return true;
		});
		return false;
	}
	$scope.validateDate= function(str){
		if(str.split('-').length==3|
			 str.split(' ').length==3|
			 str.split('.').length==3|
			 str.split('/').length==3)
			return true;
		else
			return false;
	}
	function convert(str) {
		var date = new Date(str),
				mnth = ("0" + (date.getMonth()+1)).slice(-2),
				day  = ("0" + date.getDate()).slice(-2);
		return [ date.getFullYear(), mnth, day ].join("-");
	}

	function lastIndexOfDigit(str) {
		var last_indices = [];
		[1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (digit) {
			last_indices.push(str.lastIndexOf(digit));
		});
		var indices = last_indices.sort(function (a, b) {
			return a - b;
		});
		return indices[indices.length - 1];
	}
	//Function of Similarity
	function JaroWrinker (s1, s2) {
		var m = 0;
		// Exit early if either are empty.
		if ( s1.length === 0 || s2.length === 0 ) {
			return 0;
		}
		// Exit early if they're an exact match.
		if ( s1 === s2 ) {
			return 1;
		}
		var range     = (Math.floor(Math.max(s1.length, s2.length) / 2)) - 1,
				s1Matches = new Array(s1.length),
				s2Matches = new Array(s2.length);
		for ( i = 0; i < s1.length; i++ ) {
			var low  = (i >= range) ? i - range : 0,
					high = (i + range <= s2.length) ? (i + range) : (s2.length - 1);
			for ( j = low; j <= high; j++ ) {
				if ( s1Matches[i] !== true && s2Matches[j] !== true && s1[i] === s2[j] ) {
					++m;
					s1Matches[i] = s2Matches[j] = true;
					break;
				}
			}
		}
		// Exit early if no matches were found.
		if ( m === 0 ) {
			return 0;
		}
		// Count the transpositions.
		var k = 0 ;
		var n_trans = 0;
		for ( i = 0; i < s1.length; i++ ) {
			if ( s1Matches[i] === true ) {
				for ( j = k; j < s2.length; j++ ) {
					if ( s2Matches[j] === true ) {
						k = j + 1;
						break;
					}
				}
				if ( s1[i] !== s2[j] ) {
					++n_trans;
				}
			}
		}
		var weight = (m / s1.length + m / s2.length + (m - (n_trans / 2)) / m) / 3,
				l      = 0,
				p      = 0.1;

		if ( weight > 0.7 ) {
			while ( s1[l] === s2[l] && l < 4 ) {
				++l;
			}
			weight = weight + l * p * (1 - weight);
		}
		/* if ( weight > 0.7 ) {	
									console.log(" jaro weight : "+s1+" , "+s2+" = "+weight);
						 }*/
		return weight;
	} 
	//Convertion PDF Array

	function pdfAsArray(pdfAsArray) {
		var l = pdfjsLib.getDocument(pdfAsArray);
		l.promise.then(function (pdf) {
			console.log( pdf);
			var pdfDocument = pdf;
			// Create an array that will contain our promises
			var pagesPromises = [];
			for (var i = 1; i <= pdf.numPages; i++) {
				// Required to prevent that i is always the total of pages
				// Store the promise of getPageText that returns the text of a page
				pagesPromises.push(getPageText(i, pdfDocument));


			}
			// Execute all the promises
			Promise.all(pagesPromises).then(function (pagesText) {
				//var tab= new RegExp('[\r\n]');
				// Display text of all the pages in the console
				// e.g ["Text content page 1", "Text content page 2", "Text content page 3" ... ]
				var txt ; 
				pagesText.forEach(function(item){
					txt = item.split('  ');

				}); 
				txt.splice(0,' ');
				for ( var i = 0 ; i< txt.length ; i++){
					var m = txt[i].split(' ');

					var l ;
					txt[i].toUpperCase();
					console.log(txt[i]);

					/************************ TOTAL ************************/
					var ch = 'TOTAL';
					if(txt[i].indexOf(ch) !=-1)	{	
						console.log("Total indexOf : "+txt[i].indexOf(ch));
						l=txt[i].substring(txt[i].indexOf(ch),txt[i].indexOf(ch)+ch.length+50) ;
						console.log("chaine tot : "+l);
					}
					var ch2 = "PRIX";
					if(txt[i].indexOf(ch2) !=-1)	{	
						l=txt[i].substring(txt[i].indexOf(ch2),txt[i].indexOf(ch2)+ch2.length+50) ;
						console.log("chaine tot : "+l);
					}	

					//Test pour rÃ©cuperer Value
					if(JaroWrinker(txt[i].toUpperCase(),'TOTAL') > 0.70  || JaroWrinker(txt[i].toUpperCase(),'PRIX') > 0.70){  
						var matches = l.match(/\d{1,3}[,\\.]?(\\d{1,2})?/g).join("");
						console.log("Res TOTAL "+matches);
						var val = parseInt(matches+"" ,10);

						document.getElementById('value').value =val;
						c.data.value = val ; 
						/***************************TVA*********************************/
						var tva = "TVA";
						var t ;
						if(txt[i].indexOf(tva) !=-1)	{	
							t=txt[i].substring(txt[i].indexOf(tva),txt[i].indexOf(tva)+tva.length+4) ;
							console.log("TVA: "+t);
							var matches = t.match(/\d{1,3}[,\\.]?(\\d{1,2})?/g).join("");
							console.log("Res TOTAL "+matches);
							var val = parseInt(matches+"",10);

							document.getElementById('vat').value =val;
							c.data.value= val ;
						}	

					}
					/************************ Mode de PAyment  ************************/
					var testPay = testExistePay(txt[i]);
					if(testPay.sys_id != null ){
						console.log("txt de i : "+txt[i]);
						console.log("mode de payment : "+testPay);
						$('#payment').select2('val',testPay.sys_id );
						/*c.data.payment = { 
							displayValue:testPay.name,
							value:testPay.sys_id 
						}*/
					}
					/************************ Merchant ************************/
					var test = testExiste(txt[i]);
					if (test.name != null ){
						merchId = test.sys_id ; 
						document.getElementById('merchName').value =test.name;
						document.getElementById('vatNumber').value =test.vat_number;
						document.getElementById('city').value =test.city;
						document.getElementById('zipCode').value =test.zip_code;
					}
					/************************ Date  ************************/
					var rech = "Emise le";
					var pos = txt[i].indexOf(rech); //+rech.length
					console.log("position : "+pos+" length "+rech.length);
					console.log("Date chercher: "+txt[i].substring(pos,pos+rech.length+11));
					var o = txt[i].substring(pos,pos+rech.length+11) ;
					console.log("O : "+o);
					var ddd = o.match("[0-9]{2}([\-\/\ \.])[0-9]{2}[\-\/\ \.][0-9]{4}");
					if ( ddd != null){
						var date = ddd[0].split('/');
						console.log(ddd[0] +' aaa');
						var m = moment(ddd[0]).format("YYYY-MM-DD");;
						console.log("moment :"+m);
						document.getElementById('sp_formfield_').value=m;
						$scope.dated = m ;
					}
					else{
						var dates=[];
						var dd = txt[i].match("([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}");
						if ( dd != null){
							var regex = /[0-9]{1,4}(\-|\/|\ |\.)([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\. |\ )[0-9]{1,4}/mg;
							var regex2 = /([a-zA-Z]{3,}|[0-9]{1,4})(\-|\/|\ |\.)[0-9]{1,4}(\-|\/|\. |\ )[0-9]{1,4}/mg;
							var s = $scope.getDate(regex,txt[i]);
							console.log('res'+s);
							if(s != undefined){
								if($scope.validateDate(s._i)){
									if(!findDuplicate(dates,s)){
										dates.push(s._i);
									}
								}
								s = $scope.getDate(regex2,txt[i]);
								if($scope.validateDate(s._i)){
									if(!findDuplicate(dates,s)){
										dates.push(s._i);
										var r = convert(s);
										document.getElementById('sp_formfield_c.data.dated').value=r;
										$scope.dated = m ;
									}
								}
							}

						}

						//Date
						if(txt[i].indexOf("DATE") != -1 ){
							l=model.substring(txt[i].indexOf("DATE"),txt[i].indexOf(lastIndexOfDigit(txt[i])));

						}
					}

				}
			});

		}, function (reason) {
			// PDF loading error
			console.error(reason);
		});
	}

	//Convertion To Binary
	function convertDataURIToBinary(dataURI) {
		var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
		var base64 = dataURI.substring(base64Index);
		var raw = window.atob(base64);
		var rawLength = raw.length;
		var array = new Uint8Array(new ArrayBuffer(rawLength));
		for (var i = 0; i < rawLength; i++) {
			array[i] = raw.charCodeAt(i);
		}
		pdfAsArray(array);
	}

	// Return Text Of Page
	function getPageText(pageNum, PDFDocumentInstance) {
		// Return a Promise that is solved once the text of the page is retrieven
		return new Promise(function (resolve, reject) {
			PDFDocumentInstance.getPage(pageNum).then(function (pdfPage) {
				// The main trick to obtain the text of the PDF page, use the getTextContent method
				pdfPage.getTextContent().then(function (textContent) {

					var textItems = textContent.items;
					var finalString = "";
					// Concatenate the string of the item to the final string
					for (var i = 0; i < textItems.length; i++) {
						var item = textItems[i];
						finalString += item.str + " ";
					}
					// Solve promise with the text retrieven from the page
					resolve(finalString);
				});
			});
		});
	}

	//Compare
	function compare_n_save(pdfArrayOfObject) {
		var arr3 = pdfArrayOfObject;
		datass.push(arr3);

	}


}


]]></client_script>
        <controller_as>c</controller_as>
        <css>.input-group {
    display: table;
    white-space: nowrap;
    vertical-align: top;
    width: 100%;
}
.input-group .form-control {
    display: table-cell;
    vertical-align: top;
    width: 100%;
}
.input-group .input-group-addon {
    display: table-cell;
    width: 1%;
    vertical-align: top;
   /* background: #2f353e;*/
    color: #686666;
    font-size: 1.15rem;
    line-height: 19px;
    padding-left: 10px;
    padding-right: 10px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>expense_bill_form</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Expense Bill Form</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	/** Get uSer Connecter **/
		var categ = new GlideRecord("x_315710_expense_m_category");
categ.addQuery("name",'Miels');
	categ.query();
	while(categ.next()){
gs.warn("whiel");
		data.categSysId = categ.getDisplayValue("sys_id");
			data.categName = categ.getDisplayValue("name");
		gs.warn ("cat : "+data.categSysId+" , "+data.categName);
	}

	data.reimburse = true ;
	data.vat=0;
	data.state="Pending";
	data.type = "Opex";
	var user = gs.getUserID();
	data.confirmAdd="";
		gs.warn("user sys_id: " + user.street+" , "+user.city);
	var myUserObject = gs.getUser() ;
gs.warn(JSON.stringify(myUserObject)); //print the first name of the user you are currently logged in as 

	data.userCon = user  ;
	gs.warn("Country is + "+myUserObject.country);
	
	
	
	data.userConName = myUserObject.name ;
	 gs.warn("incident.commented "+ gs.getUserID()+" " +gs.getUserName())
	gs.warn("idUser : "+data.userCon);
		gs.warn("NameUser : "+data.userConName);

	data.table ='x_315710_expense_m_expense_bill';
	data.instanceName = gs.getProperty('instance_name');
	data.merch=[];
	var merch = new GlideRecord("x_315710_expense_m_merchant");
	merch.query();
	while(merch.next()){
		merchobj={};
		$sp.getRecordValues(merchobj,merch,"sys_id,name,city,vat_number,zip_code")
		data.merch.push(merchobj);
	}
	
	/****** Liste des payment *****/
	data.payList=[];
	
		var p = new GlideRecord('x_315710_expense_m_payment_instrument');
	p.query();
	while(p.next()){
		payObj={};
		$sp.getRecordValues(payObj,p,"name,sys_id");
		data.payList.push(payObj);
	}

	if(input && input.action){
        gs.warn('script called');
		var action=input.action;
			
        data.title=input.title;

		/*Recuperer Merchant*/
		gs.warn("name merchant : "+input.merchname);
		data.merchZipCode = input.merchZipCode ;
		data.merchCity = input.merchCity ;
		data.merchVat = input.merchVat ;
		data.merchName = input.merchname ;
		gs.warn ("merchant : "+data.merchName+" , "+data.merchCity+" , "+data.merchVat+" , "+data.merchZipCode);
		/*bill*/
	    data.value=input.value;
		data.vat = input.vat ;
	    data.tips = input.tips ;
	    data.process = input.processd ;
		data.payment = input.payment ;
		data.category = input.category;
		data.user = input.user ;
		data.card = input.card ;
	    data.date = input.dated ;
	    data.state = input.state ;
		data.sheet=input.sheet;
		data.country = input.country ;
		data.reimburse =input.reimburse ;
		data.billable = input.billable ;
	    data.type=input.type;
		data.merchId = input.merchId ;
		gs.warn("les dates : "+data.process+" , "+data.date);
		gs.warn("id depuis clinet script : "+data.merchId);
        if(action=='insert'){
					var gr = new GlideRecord(data.table);
            gs.warn('insert started');   
					
					/*Merchant*/
					merch.addQuery('name',data.merchName);
					merch.addQuery('city',data.merchCity);
					merch.addQuery('vat_number',data.merchVat);
					merch.addQuery('zip_code',data.merchZipCode);
					merch.query();
					var idM  ;
					while(merch.next()){
							idM = merch.sys_id; 
						}
					gs.warn("id : "+idM);
					//var sysIdMerch ;
					if(idM== null ){
					merch.vat_number = data.merchVat ;
					merch.name = data.merchName ; 
					merch.city = data.merchCity ; 
					merch.zip_code = data.merchZipCode ;
			    idM =merch.insert();
						gs.warn("new merchant !!!!"+idM);
					}
					data.merchId = idM;
					/*Add Bill*/
            gr.title = data.title; 
            gr.value = data.value; 
            gr.state_bill = data.state;
            gr.process_date = data.process;
            gr.date=data.date;
            gr.type_bill=data.type;
            gr.tips=data.tips;
            gr.expense_sheet=data.sheet.value;
            gr.payment_instrument=data.payment.value;
            gr.category = data.category.value ;
            gr.rate_card = data.card.value ;
            gr.country = data.country.value ;
            gr.user = data.user ;
            gr.billable_to_client = data.billable;
            gr.to_reimburse= data.reimburse;
					  gr.vat = data.vat ;
					  gr.merchant =data.merchId ;
            var idd = gr.insert();
					
		  data.id = idd;
					gs.warn("idddd : "+data.id);
        }
    }   
	
	if(input && input.action=='append_image'){
		gs.warn('append started by attach : '+input.attachment_id+' and id is : '+input.rec_id);
		if(input.rec_id && input.attachment_id){

			var r = new GlideRecord(data.table);
			r.get(input.rec_id);
			r.image = input.attachment_id;
			var ress = r.update();
			gs.warn('saved  : '+ress);
				gs.addInfoMessage("Success");
			

			
		}
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-04-02 12:26:12</sys_created_on>
        <sys_id>97f88f391b20730072fe2136ec4bcb23</sys_id>
        <sys_mod_count>1617</sys_mod_count>
        <sys_name>Expense Bill Form</sys_name>
        <sys_package display_value="Expense Management" source="x_315710_expense_m">ea3c9ce91b0cfb0072fe2136ec4bcb50</sys_package>
        <sys_policy/>
        <sys_scope display_value="Expense Management">ea3c9ce91b0cfb0072fe2136ec4bcb50</sys_scope>
        <sys_update_name>sp_widget_97f88f391b20730072fe2136ec4bcb23</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-08-23 09:46:14</sys_updated_on>
        <template><![CDATA[<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.8/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.8/js/select2.min.js"></script>

<!-- CDN PDFJS -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.2.2/pdf.js"></script>
<!-- fin-->



<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>

<script src='https://cdn.jsdelivr.net/gh/naptha/tesseract.js@v1.0.14/dist/tesseract.min.js'></script>     


<form class="form-horizontal" >


  <div class="col s12 m6 l10">
                <h6 class="card-title">Expense Bill</h6>
    <hr  size="1" color="blue">
     </div>
        
        <div class="form-group">

          <label class="col-md-3 control-label" >Image <span style="color:red;">*</span> </label>
          <div class="col-md-4">


            <label class="btn btn-info btn-sm"> <span><i class="glyphicon glyphicon-paperclip"
                                                         aria-hidden="true"></i> <b>Choose file</b></span>
              <input  style='opacity:0; width:0px; height:0px;' type="file" id="fileToUpload" 
                     onchange="angular.element(this).scope().setFiles(this)" required />
            </label> 
            
           <br/>  <div ng-show="files.length">
            <div ng-repeat="file in files.slice(0)">
              <span>New : {{file.webkitRelativePath || file.name}}</span>
              (<span ng-switch="file.size > 1024*1024">
              <span ng-switch-when="true">{{file.size / 1024 / 1024 | number:2}} MB</span>
              <span ng-switch-default>{{file.size / 1024 | number:2}} kB</span>
              </span>)<span class="glyphicon glyphicon-remove-circle" id="removeicon" ng-click="removeFiles(file)"></span>
            </div></div>
					
          </div>
        </div>
        <!-- Start  Load Image -->
      <div class="form-group">
        <label class="col-md-3 control-label" ></label>
        <div class="col-md-4">
          <div ng-class="{true:'',false:'progress'}[c.data.value != null]" >
          <div class="indeterminate"></div>
        </div>
       
        </div></div>
        <!-- End Load Image -->
        <div class="form-group">
          <label class="col-md-3 control-label" >Expense Sheet <span style="color:red;">*</span></label>
          <div class="col-md-4">
            <sn-record-picker field="sheet"
                              table="'x_315710_expense_m_expense_sheet'" 
                              display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
                              page-size="100"   ></sn-record-picker>
          </div>
        </div>

        <div class="form-group">
          <label class="col-md-3 control-label" >Category </label>
          <div class="col-md-4">
            <sn-record-picker field="category"
                              table="'x_315710_expense_m_category'" 
                              display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
                              page-size="100" ></sn-record-picker>
          </div>
        </div>

        <div class="form-group">
          <label class="col-md-3 control-label" >Title <span style="color:red;">*</span> </label>
          <div class="col-md-4">
            <input id="Title" type="text" placeholder="" class="form-control" name="title" ng-model="c.data.title" required>
          </div>
        </div>


        <div class="form-group">
          <label class="col-md-3 control-label" >Value <span style="color:red;">*</span> </label>
          <div class="col-md-4">
            <input id="value" type="number" class="form-control" name="value"  ng-model="c.data.value" >
          </div>
        </div>


        <div class="form-group">

          <label class="col-md-3 control-label" >VAT</label>

          <div class="col-md-4">
            <div class="input-group">
              <input min="0" max="100" id="vat" type="number" class="form-control" name="vat"  ng-model="c.data.vat" />
              <label class="input-group-addon" for="number">%</label> 
            </div>
          </div>
        </div>

        <div class="form-group">
          <label class="col-md-3 control-label" >Tip(s)</label>
          <div class="col-md-4">
            <input id="tips" type="number" class="form-control" name="tips" ng-model="c.data.tips" />
          </div>
        </div>
        <div class="form-group">
          <label class="col-md-3 control-label" >Payment Instrument <span style="color:red;">*</span></label>
          <div class="col-md-4">
            <sn-record-picker field="payment"
                              table="'x_315710_expense_m_payment_instrument'" 
                              display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
                              page-size="100"  default-query="c.assigned_to_query" ></sn-record-picker>
          </div>
        </div>

        <div class="form-group">
          <label class="col-md-3 control-label" >Date <span style="color:red;">*</span> </label>
          <div class="col-md-4">
            <sp-date-picker field="dated" display-field="'value'" ng-model="dated" sn-change="" ></sp-date-picker> </div>
        </div>

        <div class="form-group">
          <label class="col-md-3 control-label" >Date Process</label>
          <div class="col-md-4">
            <sp-date-picker  display-field="'value'"  field="processd" ng-model="processd" sn-change="" ></sp-date-picker>
     
          </div>
        </div>
        <div class="form-group">
          <label class="col-md-3 control-label" >User</label>
          <div class="col-md-4">
            <div ng-if="c.data.userConName == 'admin'">
              <sn-record-picker field="user" table="'sys_user'" 
                                display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
                                page-size="100"  ></sn-record-picker>
            </div>
            <div ng-if="c.data.userConName != 'admin'">
              <sn-record-picker sn-disabled="c.data.userConName" field="c.data.user" table="'sys_user'" 
                                display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
                                page-size="100"  ></sn-record-picker>
            </div>
          </div>
        </div>

        <div class="form-group">
          <label class="col-md-3 control-label" >Rate Card</label>
          <div class="col-md-4">
            <sn-record-picker field="card"
                              table="'fm_rate_card'" 
                              display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
                              page-size="100"   ></sn-record-picker>
          </div>
        </div>

        <div class="form-group">
          <label class="col-md-3 control-label" >Country</label>
          <div class="col-md-4">
            <sn-record-picker field="country"
                              table="'core_country'" 
                              display-field="'name'" value-field="'sys_id'" search-fields="'name'" 
                              page-size="100"  ></sn-record-picker>
          </div>
        </div>
        <div class="form-group">
          <div class="col-md-3 control-label" ></div>
          <label>
        
            <input  type="checkbox" ng-model="c.data.reimburse" class="filled-in" id="reimburse" value="r"   ng-checked="data.reimburse == true"  />
            <span>To Reimburse</span>
          </label>
        </div>
        <div class="form-group">
          <div class="col-md-3 control-label" ></div>
          <label>
            <input type="checkbox" ng-model="c.data.billable"  class="filled-in"  id="billable" value="b"   />
            <span>Billable to client</span>
          </label>
        </div>



        <div class="form-group">
          <label class="col-md-3 control-label" >Type</label>
          <div class="col-md-4">
            <select class="form-control" name="type" id="type" ng-model="c.data.type" [ng-value]='data.type'>
              <option value="Capex">Capex</option> 
              <option value="Opex">Opex</option>
            </select>
          </div>
        </div>

        <div class="form-group">
          <label class="col-md-3 control-label" >State</label>
          <div class="col-md-4">
            <select class="form-control" name="state" id="state" ng-model="c.data.state"  [ng-value]='data.state'>
              <option value="Pending" >Pending</option> 
              <option value="Processed">Processed</option>
            </select>
          </div>
        </div>


       <div class="col s12 m6 l10">
                <h6 >Merchant</h6>
         <hr size=2>
     </div>
        
        <div class="form-group">
          <label class="col-md-3 control-label" >Name</label>
          <div class="col-md-4">
            <input id="merchName" type="text" placeholder="" class="form-control" name="n" ng-model="c.data.merchname"  />
          </div>
        </div>
        <div class="form-group">
          <label class="col-md-3 control-label" >Vat Number</label>
          <div class="col-md-4">
            <input id="vatNumber" type="text" placeholder="" class="form-control" name="v" ng-model="c.data.merchVat"  />
          </div>
        </div>
        <div class="form-group">
          <label class="col-md-3 control-label" >City</label>
          <div class="col-md-4">
            <input id="city" type="text" placeholder="" class="form-control" name="c" ng-model="c.data.merchCity"/>
          </div>
        </div>
        <div class="form-group">
          <label class="col-md-3 control-label" >Zip Code</label>
          <div class="col-md-4">
            <input id="zipCode" type="text" placeholder="" class="form-control" name="z" ng-model="c.data.merchZipCode" />
          </div>
        </div>
<!--  <div ng-if="testComplete() == false">-->
    <button ng-disabled="testComplete() == false" class="btn waves-effect waves-light " ng-click="testComplete();submit_record()" type="submit" name="action">Send<i class="material-icons right">send</i>
  </button>
 <!-- </div>   
   <div ng-if="testComplete()">
  <button class="btn waves-effect waves-light " ng-click="testComplete();submit_record()" type="submit" name="action">Send<i class="material-icons right">send</i>
  </button>

  </div>-->
</form>]]></template>
    </sp_widget>
</record_update>
